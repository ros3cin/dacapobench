diff -ur xalan-j_2_7_1/build.xml xalan-j_2_7_1-modified/build.xml
--- xalan-j_2_7_1/build.xml	2007-11-22 18:44:01.000000000 -0300
+++ xalan-j_2_7_1-modified/build.xml	2018-07-15 04:29:59.787764342 -0300
@@ -104,6 +104,14 @@
   <property name="runtime.jar"            value="${lib.dir}/${runtime.jar.name}"/>
   <property name="regexp.jar.name"        value="regexp.jar"/>
   <property name="regexp.jar"             value="${lib.dir}/${regexp.jar.name}"/>
+  <property name="apache_commons_collections.jar.name"        value="commons-collections4-4.1.jar"/>
+  <property name="apache_commons_collections.jar"        value="${lib.dir}/${apache_commons_collections.jar.name}"/>
+  <property name="eclipse_collections_api.jar.name"        value="eclipse-collections-api-9.1.0.jar"/>
+  <property name="eclipse_collections_api.jar"             value="${lib.dir}/${eclipse_collections_api.jar.name}"/>
+  <property name="eclipse_collections_impl.jar.name"        value="eclipse-collections-9.1.0.jar"/>
+  <property name="eclipse_collections_impl.jar"             value="${lib.dir}/${eclipse_collections_impl.jar.name}"/>
+  <property name="jsr166e.jar.name"        value="jsr166e-1.0.jar"/>
+  <property name="jsr166e.jar"             value="${lib.dir}/${jsr166e.jar.name}"/>
   
   <!-- Jars need to build Xalan Java (Interpretive, Compiled, or both) or build the docs -->
   <property name="java_cup.jar.name"      value="java_cup.jar"/>
@@ -205,6 +213,10 @@
     <pathelement location="${taglet.jar}" />
     <pathelement location="${build.serializer.jar}" />
     <pathelement location="${build.xalan.jar}" />
+    <pathelement location="${apache_commons_collections.jar}" />
+    <pathelement location="${eclipse_collections_api.jar}" />
+    <pathelement location="${eclipse_collections_impl.jar}" />
+    <pathelement location="${jsr166e.jar}" />
     <pathelement path="${java.class.path}" />
   </path>
   <path id="samples.class.path">
@@ -212,6 +224,10 @@
     <pathelement location="${build.serializer.jar}" />    
     <pathelement location="${parser.jar}" />  
     <pathelement location="${build.xalan.jar}" />
+    <pathelement location="${apache_commons_collections.jar}" />
+    <pathelement location="${eclipse_collections_api.jar}" />
+    <pathelement location="${eclipse_collections_impl.jar}" />
+    <pathelement location="${jsr166e.jar}" />
     <pathelement path="${java.class.path}" />
   </path>
   <path id="compile.class.path">
@@ -221,6 +237,10 @@
     <pathelement location="${xmlapis.jar}" />
     <pathelement location="${build.serializer.jar}" />
     <pathelement location="${parser.jar}" />
+    <pathelement location="${apache_commons_collections.jar}" />
+    <pathelement location="${eclipse_collections_api.jar}" />
+    <pathelement location="${eclipse_collections_impl.jar}" />
+    <pathelement location="${jsr166e.jar}" />
     <pathelement path="${java.class.path}" />
   </path>
   <path id="xslt.boot.class.path">
@@ -233,11 +253,19 @@
     <pathelement location="${xmlapis.jar}" />
     <pathelement location="${build.serializer.jar}" />    
     <pathelement location="${parser.jar}" />   
+    <pathelement location="${apache_commons_collections.jar}" />
+    <pathelement location="${eclipse_collections_api.jar}" />
+    <pathelement location="${eclipse_collections_impl.jar}" />
+    <pathelement location="${jsr166e.jar}" />
     <pathelement path="${build.boot.class.path}" />
     <pathelement path="${sun.boot.class.path}" />
   </path>
   <path id="compile.source.path">
     <dirset dir="${src.dir}" includes="/org/apache/**" />
+    <pathelement location="${apache_commons_collections.jar}" />
+    <pathelement location="${eclipse_collections_api.jar}" />
+    <pathelement location="${eclipse_collections_impl.jar}" />
+    <pathelement location="${jsr166e.jar}" />
   </path>
 
   <!-- patternsets for source and binary distribution packages -->
@@ -251,6 +279,10 @@
     <include name="${dist.file}/${xmlapis.jar.name}"/>
     <include name="${dist.file}/${parser.jar.name}"/>
     <include name="${dist.file}/${serializer.jar.name}"/>
+    <include name="${dist.file}/${apache_commons_collections.jar.name}"/>
+    <include name="${dist.file}/${eclipse_collections_api.jar.name}"/>
+    <include name="${dist.file}/${eclipse_collections_impl.jar.name}"/>
+    <include name="${dist.file}/${jsr166e.jar.name}"/>
     <include name="${dist.file}/samples/"/>    
     <include name="${dist.file}/samples/xalansamples.jar"/>
     <include name="${dist.file}/samples/xalanservlet.war"/>
@@ -270,6 +302,10 @@
     <include name="${dist.file}/${xmlapis.jar.name}"/>
     <include name="${dist.file}/${parser.jar.name}"/>
     <include name="${dist.file}/${serializer.jar.name}"/>
+    <include name="${dist.file}/${apache_commons_collections.jar.name}"/>
+    <include name="${dist.file}/${eclipse_collections_api.jar.name}"/>
+    <include name="${dist.file}/${eclipse_collections_impl.jar.name}"/>
+    <include name="${dist.file}/${jsr166e.jar.name}"/>
     <include name="${dist.file}/samples/"/>        
     <include name="${dist.file}/samples/xalansamples.jar"/>
     <include name="${dist.file}/samples/xalanservlet.war"/>
@@ -305,6 +341,10 @@
     <include name="${dist.file}/tools/${jlex.jar.name}"/>
     <include name="${dist.file}/lib/${runtime.jar.name}"/>
     <include name="${dist.file}/lib/${regexp.jar.name}"/>
+    <include name="${dist.file}/lib/${apache_commons_collections.jar.name}"/>
+    <include name="${dist.file}/lib/${eclipse_collections_api.jar.name}"/>
+    <include name="${dist.file}/lib/${eclipse_collections_impl.jar.name}"/>
+    <include name="${dist.file}/${jsr166e.jar.name}"/>
   </patternset>
 
   <!-- =================================================================== -->
@@ -431,6 +471,10 @@
     <pathelement location="${jlex.jar}" />
     <pathelement location="${java_cup.jar}" />
     <pathelement location="${runtime.jar}" />
+    <pathelement location="${apache_commons_collections.jar}" />
+    <pathelement location="${eclipse_collections_api.jar}" />
+    <pathelement location="${eclipse_collections_impl.jar}" />
+    <pathelement location="${jsr166e.jar}"/>
     <!-- build.classes needed for 
          org.apache.xalan.xsltc.util.JavaCupRedirect -->
     <pathelement location="${build.classes}" />
@@ -559,6 +603,12 @@
     <!-- remove the jar file -->
     <delete file="${build.classes}/${param_jar_name}" />
   </target>
+
+  <!-- A parametrized target which is used to copy and expand a XSLTC support jar -->
+  <target name="xsltc.copy-deps-jar-not-unjared" unless="${param_unless}">
+    <!-- copy the jar file to the build/classes directory -->
+    <copy todir="${build.dir}" file="${lib.dir}/${param_jar_name}"/>
+  </target>
   
   <!-- Copy and expand the XSLTC support jars if needed -->
   <target name="xsltc.copy-deps-jars" depends="xsltc.copy-licenses">
@@ -592,6 +642,26 @@
       <param name="param_unless" value="xsltc.regexp_jar.not_needed" />
       <param name="param_jar_name" value="${regexp.jar.name}" />
     </antcall>
+
+    <antcall target="xsltc.copy-deps-jar-not-unjared">
+      <param name="param_unless" value="" />
+      <param name="param_jar_name" value="${apache_commons_collections.jar.name}" />
+    </antcall>
+
+    <antcall target="xsltc.copy-deps-jar-not-unjared">
+      <param name="param_unless" value="" />
+      <param name="param_jar_name" value="${eclipse_collections_api.jar.name}" />
+    </antcall>
+
+    <antcall target="xsltc.copy-deps-jar-not-unjared">
+      <param name="param_unless" value="" />
+      <param name="param_jar_name" value="${eclipse_collections_impl.jar.name}" />
+    </antcall>
+
+    <antcall target="xsltc.copy-deps-jar-not-unjared">
+      <param name="param_unless" value="" />
+      <param name="param_jar_name" value="${jsr166e.jar.name}" />
+    </antcall>
     
     <!-- remove the old META-INF/MANIFEST.MF file -->
     <delete file="${build.classes}/META-INF/MANIFEST.MF" quiet="true"/>  
Only in xalan-j_2_7_1-modified: .git
diff -ur xalan-j_2_7_1/src/MANIFEST.MF xalan-j_2_7_1-modified/src/MANIFEST.MF
--- xalan-j_2_7_1/src/MANIFEST.MF	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified/src/MANIFEST.MF	2018-07-15 04:30:09.396119657 -0300
@@ -1,8 +1,7 @@
 Manifest-Version: 1.0
 Created-By: @java.version@ (@java.vendor@)
 Main-Class: org.apache.xalan.xslt.Process
-Class-Path: xercesImpl.jar xml-apis.jar serializer.jar
-
+Class-Path: xercesImpl.jar xml-apis.jar serializer.jar eclipse-collections-api-9.1.0.jar eclipse-collections-9.1.0.jar jsr166e-1.0.jar
 
 Name: org/apache/xalan/
 Comment: Main Xalan engine implementing TrAX/JAXP
diff -ur xalan-j_2_7_1/src/org/apache/xalan/extensions/ExtensionHandlerGeneral.java xalan-j_2_7_1-modified/src/org/apache/xalan/extensions/ExtensionHandlerGeneral.java
--- xalan-j_2_7_1/src/org/apache/xalan/extensions/ExtensionHandlerGeneral.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/extensions/ExtensionHandlerGeneral.java	2018-07-15 14:28:01.649682186 -0300
@@ -27,6 +27,7 @@
 import java.net.URLConnection;
 import java.util.Hashtable;
 import java.util.Vector;
+import java.util.concurrent.ConcurrentHashMap;
 
 import javax.xml.transform.TransformerException;
 
@@ -63,10 +64,10 @@
   private String m_scriptSrcURL;  
 
   /** functions of namespace        */
-  private Hashtable m_functions = new Hashtable();  
+  private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap m_functions = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();  
 
   /** elements of namespace         */
-  private Hashtable m_elements = new Hashtable();   
+  private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap m_elements = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();   
 
   // BSF objects used to invoke BSF by reflection.  Do not import the BSF classes
   // since we don't want a compile dependency on BSF.
diff -ur xalan-j_2_7_1/src/org/apache/xalan/extensions/ExtensionHandlerJava.java xalan-j_2_7_1-modified/src/org/apache/xalan/extensions/ExtensionHandlerJava.java
--- xalan-j_2_7_1/src/org/apache/xalan/extensions/ExtensionHandlerJava.java	2007-11-22 18:43:52.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/extensions/ExtensionHandlerJava.java	2018-07-15 14:29:09.000385717 -0300
@@ -21,6 +21,7 @@
 package org.apache.xalan.extensions;
 
 import java.util.Hashtable;
+import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * Abstract base class handling the java language extensions for XPath.
@@ -36,7 +37,7 @@
   protected String m_className = "";
 
   /** Table of cached methods          */
-  private Hashtable m_cachedMethods = new Hashtable();
+  private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap m_cachedMethods = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 
   /**
    * Construct a new extension handler given all the information
diff -ur xalan-j_2_7_1/src/org/apache/xalan/extensions/ExtensionNamespacesManager.java xalan-j_2_7_1-modified/src/org/apache/xalan/extensions/ExtensionNamespacesManager.java
--- xalan-j_2_7_1/src/org/apache/xalan/extensions/ExtensionNamespacesManager.java	2007-11-22 18:43:55.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/extensions/ExtensionNamespacesManager.java	2018-07-15 04:41:48.351634472 -0300
@@ -20,7 +20,10 @@
  */
 package org.apache.xalan.extensions;
 
+import java.util.ArrayList;
+import java.util.Collections;
 import java.util.Vector;
+import java.util.List;
 
 import org.apache.xalan.templates.Constants;
 
@@ -40,12 +43,12 @@
    * Vector of ExtensionNamespaceSupport objects for predefined ExtensionNamespaces. Elements
    * from this vector are added to the m_extensions vector when encountered in the stylesheet.
    */
-  private Vector m_predefExtensions = new Vector(7);
+  private List m_predefExtensions = Collections.synchronizedList(new ArrayList(7));
   /**
    * Vector of extension namespaces for which sufficient information is not yet available to
    * complete the registration process.
    */
-  private Vector m_unregisteredExtensions = new Vector();
+  private List m_unregisteredExtensions = Collections.synchronizedList(new ArrayList());
   
   /**
    * An ExtensionNamespacesManager is instantiated the first time an extension function or
@@ -100,7 +103,7 @@
    * Get the index for a namespace entry in the extension namespace Vector, -1 if
    * no such entry yet exists.
    */
-  public int namespaceIndex(String namespace, Vector extensions)
+  public int namespaceIndex(String namespace, List extensions)
   {
     for (int i = 0; i < extensions.size(); i++)
     {
diff -ur xalan-j_2_7_1/src/org/apache/xalan/extensions/ExtensionsTable.java xalan-j_2_7_1-modified/src/org/apache/xalan/extensions/ExtensionsTable.java
--- xalan-j_2_7_1/src/org/apache/xalan/extensions/ExtensionsTable.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/extensions/ExtensionsTable.java	2018-07-15 14:30:46.085828374 -0300
@@ -22,6 +22,7 @@
 
 import java.util.Hashtable;
 import java.util.Vector;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.xalan.res.XSLMessages;
 import org.apache.xalan.res.XSLTErrorResources;
@@ -41,7 +42,7 @@
    * name.
    * @xsl.usage internal
    */
-  public Hashtable m_extensionFunctionNamespaces = new Hashtable();
+  public org.eclipse.collections.impl.map.mutable.ConcurrentHashMap m_extensionFunctionNamespaces = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
   
   /**
    * The StylesheetRoot associated with this extensions table.
diff -ur xalan-j_2_7_1/src/org/apache/xalan/lib/ExsltSets.java xalan-j_2_7_1-modified/src/org/apache/xalan/lib/ExsltSets.java
--- xalan-j_2_7_1/src/org/apache/xalan/lib/ExsltSets.java	2007-11-22 18:43:55.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/lib/ExsltSets.java	2018-07-15 02:26:53.329174515 -0300
@@ -22,6 +22,7 @@
 
 import java.util.HashMap;
 import java.util.Map;
+import org.apache.commons.collections4.map.HashedMap;
 
 import org.apache.xml.utils.DOMHelper;
 import org.apache.xpath.NodeSet;
@@ -191,7 +192,7 @@
     NodeSet dist = new NodeSet();
     dist.setShouldCacheNodes(true);
 
-    Map stringTable = new HashMap();
+    Map stringTable = new HashedMap();
     
     for (int i = 0; i < nl.getLength(); i++)
     {
diff -ur xalan-j_2_7_1/src/org/apache/xalan/lib/Extensions.java xalan-j_2_7_1-modified/src/org/apache/xalan/lib/Extensions.java
--- xalan-j_2_7_1/src/org/apache/xalan/lib/Extensions.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/lib/Extensions.java	2018-07-15 15:33:29.001366506 -0300
@@ -22,6 +22,7 @@
 
 import java.util.Hashtable;
 import java.util.StringTokenizer;
+import java.util.concurrent.ConcurrentHashMap;
 
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
@@ -329,7 +330,7 @@
 
       // If reflection failed, fallback to our internal EnvironmentCheck
       EnvironmentCheck envChecker = new EnvironmentCheck();
-      Hashtable h = envChecker.getEnvironmentHash();
+      org.eclipse.collections.impl.map.mutable.ConcurrentHashMap h = envChecker.getEnvironmentHash();
       resultNode = factoryDocument.createElement("checkEnvironmentExtension");
       envChecker.appendEnvironmentReport(resultNode, factoryDocument, h);
       envChecker = null;
diff -ur xalan-j_2_7_1/src/org/apache/xalan/lib/Redirect.java xalan-j_2_7_1-modified/src/org/apache/xalan/lib/Redirect.java
--- xalan-j_2_7_1/src/org/apache/xalan/lib/Redirect.java	2007-11-22 18:43:53.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/lib/Redirect.java	2018-07-15 04:46:39.869777815 -0300
@@ -24,6 +24,7 @@
 import java.io.FileOutputStream;
 import java.io.OutputStream;
 import java.util.Hashtable;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 import javax.xml.transform.Result;
 import javax.xml.transform.TransformerException;
@@ -126,12 +127,12 @@
   /**
    * List of formatter listeners indexed by filename.
    */
-  protected Hashtable m_formatterListeners = new Hashtable ();
+  protected ConcurrentHashMap m_formatterListeners = new ConcurrentHashMap ();
 
   /**
    * List of output streams indexed by filename.
    */
-  protected Hashtable m_outputStreams = new Hashtable ();
+  protected ConcurrentHashMap m_outputStreams = new ConcurrentHashMap ();
 
   /** 
    * Default append mode for bare open calls.  
diff -ur xalan-j_2_7_1/src/org/apache/xalan/lib/sql/ConnectionPoolManager.java xalan-j_2_7_1-modified/src/org/apache/xalan/lib/sql/ConnectionPoolManager.java
--- xalan-j_2_7_1/src/org/apache/xalan/lib/sql/ConnectionPoolManager.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/lib/sql/ConnectionPoolManager.java	2018-07-15 14:31:15.588955102 -0300
@@ -23,6 +23,7 @@
  package org.apache.xalan.lib.sql;
 
 import java.util.Hashtable;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.xalan.res.XSLMessages;
 import org.apache.xalan.res.XSLTErrorResources;
@@ -33,7 +34,7 @@
 {
   /**
    */
-  private static Hashtable m_poolTable = null;
+  private static org.eclipse.collections.impl.map.mutable.ConcurrentHashMap m_poolTable = null;
 
   /**
    */
@@ -53,7 +54,7 @@
      * Initialize the pool table
      */   
     if (m_poolTable == null)
-            m_poolTable = new Hashtable();
+            m_poolTable = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
   }
 
   /**
diff -ur xalan-j_2_7_1/src/org/apache/xalan/lib/sql/QueryParameter.java xalan-j_2_7_1-modified/src/org/apache/xalan/lib/sql/QueryParameter.java
--- xalan-j_2_7_1/src/org/apache/xalan/lib/sql/QueryParameter.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/lib/sql/QueryParameter.java	2018-07-15 14:31:48.703940516 -0300
@@ -24,6 +24,7 @@
 package org.apache.xalan.lib.sql;
 
 import java.util.Hashtable;
+import java.util.concurrent.ConcurrentHashMap;
 import java.sql.PreparedStatement;
 import java.sql.CallableStatement;
 import java.sql.Statement;
@@ -35,7 +36,7 @@
   private String  m_value;
   private boolean m_output;
   private String  m_typeName;
-  private static  Hashtable m_Typetable = null;
+  private static  org.eclipse.collections.impl.map.mutable.ConcurrentHashMap m_Typetable = null;
 
   public QueryParameter()
   {
@@ -148,7 +149,7 @@
     if ( m_Typetable == null )
     {
       // Load up the type mapping table.
-      m_Typetable = new Hashtable();
+      m_Typetable = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
       m_Typetable.put("BIGINT", new Integer(java.sql.Types.BIGINT));
       m_Typetable.put("BINARY", new Integer(java.sql.Types.BINARY));
       m_Typetable.put("BIT", new Integer(java.sql.Types.BIT));
diff -ur xalan-j_2_7_1/src/org/apache/xalan/processor/XSLTElementDef.java xalan-j_2_7_1-modified/src/org/apache/xalan/processor/XSLTElementDef.java
--- xalan-j_2_7_1/src/org/apache/xalan/processor/XSLTElementDef.java	2007-11-22 18:43:53.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/processor/XSLTElementDef.java	2018-07-15 15:31:59.030816418 -0300
@@ -20,8 +20,10 @@
  */
 package org.apache.xalan.processor;
 
+import java.util.Collections;
 import java.util.Enumeration;
 import java.util.Hashtable;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.xalan.templates.Constants;
 import org.apache.xml.utils.QName;
@@ -285,7 +287,7 @@
 				if (def != null && def.getRequired())
 				{
 					if (m_requiredFound == null)			
-						m_requiredFound = new Hashtable();
+						m_requiredFound = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 					m_requiredFound.put(def.getName(), "xsl:" +def.getName()); 
 				}
 			}
@@ -696,7 +698,7 @@
     return m_required;
   }
 	
-	Hashtable m_requiredFound;
+	org.eclipse.collections.impl.map.mutable.ConcurrentHashMap m_requiredFound;
 	
 	/**
    * Set this required element found.
@@ -729,7 +731,7 @@
   {
 		if (m_requiredFound == null)
 			return null;
-		Enumeration elems = m_requiredFound.elements();
+		Enumeration elems = Collections.enumeration(m_requiredFound.values());
 		String s = "";
 		boolean first = true;
 		while (elems.hasMoreElements())
diff -ur xalan-j_2_7_1/src/org/apache/xalan/templates/Stylesheet.java xalan-j_2_7_1-modified/src/org/apache/xalan/templates/Stylesheet.java
--- xalan-j_2_7_1/src/org/apache/xalan/templates/Stylesheet.java	2007-11-22 18:43:52.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/templates/Stylesheet.java	2018-07-15 14:40:31.447762611 -0300
@@ -26,6 +26,7 @@
 import java.util.Hashtable;
 import java.util.Stack;
 import java.util.Vector;
+import java.util.concurrent.ConcurrentHashMap;
 
 import javax.xml.transform.SourceLocator;
 import javax.xml.transform.TransformerException;
@@ -1151,7 +1152,7 @@
    * The "non-xsl-top-level" properties.
    * @serial
    */
-  private Hashtable m_NonXslTopLevel;
+  private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap m_NonXslTopLevel;
 
   /**
    * Set found a non-xslt element.
@@ -1164,7 +1165,7 @@
   {
 
     if (null == m_NonXslTopLevel)
-      m_NonXslTopLevel = new Hashtable();
+      m_NonXslTopLevel = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 
     m_NonXslTopLevel.put(name, obj);
   }
@@ -1486,7 +1487,7 @@
       
       if(null != m_NonXslTopLevel)
       {
-      	java.util.Enumeration elements = m_NonXslTopLevel.elements();
+      	java.util.Enumeration elements = java.util.Collections.enumeration(m_NonXslTopLevel.values());
       	while(elements.hasMoreElements())
       	{
       	  ElemTemplateElement elem = (ElemTemplateElement)elements.nextElement();
diff -ur xalan-j_2_7_1/src/org/apache/xalan/templates/StylesheetRoot.java xalan-j_2_7_1-modified/src/org/apache/xalan/templates/StylesheetRoot.java
--- xalan-j_2_7_1/src/org/apache/xalan/templates/StylesheetRoot.java	2007-11-22 18:43:53.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/templates/StylesheetRoot.java	2018-07-15 14:46:05.421857897 -0300
@@ -26,6 +26,8 @@
 import java.util.Hashtable;
 import java.util.Properties;
 import java.util.Vector;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
+import org.eclipse.collections.impl.map.mutable.UnifiedMap;
 
 import javax.xml.transform.ErrorListener;
 import javax.xml.transform.Templates;
@@ -288,10 +290,10 @@
     m_outputProperties = new OutputProperties(org.apache.xml.serializer.Method.UNKNOWN);
 //  m_outputProperties = new OutputProperties(Method.XML);
     
-    m_attrSets = new HashMap();
-    m_decimalFormatSymbols = new Hashtable();
+    m_attrSets = new UnifiedMap();
+    m_decimalFormatSymbols = new ConcurrentHashMap();
     m_keyDecls = new Vector();
-    m_namespaceAliasComposed = new Hashtable();
+    m_namespaceAliasComposed = new ConcurrentHashMap();
     m_templateList = new TemplateList();
     m_variables = new Vector();
 
@@ -541,7 +543,7 @@
    * Each entry is a vector of ElemAttributeSet objects.
    * @serial
    */
-  private HashMap m_attrSets;
+  private UnifiedMap m_attrSets;
 
   /**
    * Recompose the attribute-set declarations.
@@ -582,7 +584,7 @@
    * Table of DecimalFormatSymbols, keyed by QName.
    * @serial
    */
-  private Hashtable m_decimalFormatSymbols;
+  private ConcurrentHashMap m_decimalFormatSymbols;
 
   /**
    * Recompose the decimal-format declarations.
@@ -672,7 +674,7 @@
    * Composed set of all namespace aliases.
    * @serial
    */
-  private Hashtable m_namespaceAliasComposed;
+  private ConcurrentHashMap m_namespaceAliasComposed;
 
   /**
    * Recompose the namespace-alias declarations.
diff -ur xalan-j_2_7_1/src/org/apache/xalan/templates/TemplateList.java xalan-j_2_7_1-modified/src/org/apache/xalan/templates/TemplateList.java
--- xalan-j_2_7_1/src/org/apache/xalan/templates/TemplateList.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/templates/TemplateList.java	2018-07-15 02:54:59.344569316 -0300
@@ -20,9 +20,11 @@
  */
 package org.apache.xalan.templates;
 
+import java.util.Collections;
 import java.util.Enumeration;
 import java.util.Hashtable;
 import java.util.Vector;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 import javax.xml.transform.TransformerException;
 
@@ -133,7 +135,7 @@
   void dumpAssociationTables()
   {
 
-    Enumeration associations = m_patternTable.elements();
+    Enumeration associations = Collections.enumeration(m_patternTable.values());
 
     while (associations.hasMoreElements())
     {
@@ -181,7 +183,7 @@
 
     if (null != m_wildCardPatterns)
     {
-      Enumeration associations = m_patternTable.elements();
+      Enumeration associations = Collections.enumeration(m_patternTable.values());
 
       while (associations.hasMoreElements())
       {
@@ -774,7 +776,7 @@
    * to some degree of specifity.
    * @serial
    */
-  private Hashtable m_patternTable = new Hashtable(89);
+  private ConcurrentHashMap m_patternTable = new ConcurrentHashMap(89);
 
   /** Wildcard patterns.
    *  @serial          */
@@ -863,11 +865,11 @@
     private boolean inPatterns;
     private TemplateSubPatternAssociation curPattern;
 
-    private Hashtable m_compilerCache = new Hashtable();
+    private ConcurrentHashMap m_compilerCache = new ConcurrentHashMap();
 
     private TemplateWalker()
     {
-      hashIterator = m_patternTable.elements();
+      hashIterator = Collections.enumeration(m_patternTable.values());
       inPatterns = true;
       curPattern = null;
     }
diff -ur xalan-j_2_7_1/src/org/apache/xalan/transformer/TransformerIdentityImpl.java xalan-j_2_7_1-modified/src/org/apache/xalan/transformer/TransformerIdentityImpl.java
--- xalan-j_2_7_1/src/org/apache/xalan/transformer/TransformerIdentityImpl.java	2007-11-22 18:43:52.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/transformer/TransformerIdentityImpl.java	2018-07-15 14:47:16.384321995 -0300
@@ -23,6 +23,7 @@
 import java.io.IOException;
 import java.util.Hashtable;
 import java.util.Properties;
+import java.util.concurrent.ConcurrentHashMap;
 
 import javax.xml.XMLConstants;
 import javax.xml.parsers.DocumentBuilder;
@@ -551,7 +552,7 @@
     
     if (null == m_params)
     {
-      m_params = new Hashtable();
+      m_params = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
     }
 
     m_params.put(name, value);
@@ -1455,7 +1456,7 @@
    * The parameters, which is unused, but must be returned to fullfill the
    *  Transformer interface.
    */
-  private Hashtable m_params;
+  private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap m_params;
 
   /** The error listener for TrAX errors and warnings. */
   private ErrorListener m_errorListener =
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xslt/EnvironmentCheck.java xalan-j_2_7_1-modified/src/org/apache/xalan/xslt/EnvironmentCheck.java
--- xalan-j_2_7_1/src/org/apache/xalan/xslt/EnvironmentCheck.java	2007-11-22 18:43:53.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/xslt/EnvironmentCheck.java	2018-07-15 15:34:30.870848887 -0300
@@ -27,8 +27,10 @@
 import java.lang.reflect.Method;
 import java.util.Enumeration;
 import java.util.Hashtable;
+import java.util.Iterator;
 import java.util.StringTokenizer;
 import java.util.Vector;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -166,7 +168,7 @@
       outWriter = pw;
 
     // Setup a hash to store various environment information in
-    Hashtable hash = getEnvironmentHash();
+    org.eclipse.collections.impl.map.mutable.ConcurrentHashMap hash = getEnvironmentHash();
 
     // Check for ERROR keys in the hashtable, and print report
     boolean environmentHasErrors = writeEnvironmentReport(hash);
@@ -212,10 +214,10 @@
    * @return Hashtable full of useful environment info about Xalan 
    * and related system properties, etc.
    */
-  public Hashtable getEnvironmentHash()
+  public org.eclipse.collections.impl.map.mutable.ConcurrentHashMap getEnvironmentHash()
   {
     // Setup a hash to store various environment information in
-    Hashtable hash = new Hashtable();
+    org.eclipse.collections.impl.map.mutable.ConcurrentHashMap hash = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 
     // Call various worker methods to fill in the hash
     //  These are explicitly separate for maintenance and so 
@@ -245,7 +247,7 @@
    * @see #appendEnvironmentReport(Node, Document, Hashtable)
    * for an equivalent that appends to a Node instead
    */
-  protected boolean writeEnvironmentReport(Hashtable h)
+  protected boolean writeEnvironmentReport(org.eclipse.collections.impl.map.mutable.ConcurrentHashMap h)
   {
 
     if (null == h)
@@ -260,12 +262,12 @@
       "#---- BEGIN writeEnvironmentReport($Revision$): Useful stuff found: ----");
 
     // Fake the Properties-like output
-    for (Enumeration keys = h.keys(); 
-         keys.hasMoreElements();
+    for (Iterator keys = h.keySet().iterator(); 
+         keys.hasNext();
         /* no increment portion */
         )
     {
-      Object key = keys.nextElement();
+      Object key = keys.next();
       String keyStr = (String) key;
       try
       {
@@ -406,7 +408,7 @@
    * @see #writeEnvironmentReport(Hashtable)
    * for an equivalent that writes to a PrintWriter instead
    */
-  public void appendEnvironmentReport(Node container, Document factory, Hashtable h)
+  public void appendEnvironmentReport(Node container, Document factory, org.eclipse.collections.impl.map.mutable.ConcurrentHashMap h)
   {
     if ((null == container) || (null == factory))
     {
@@ -433,12 +435,12 @@
       Element hashNode = factory.createElement("environment");
       envCheckNode.appendChild(hashNode);
       
-      for (Enumeration keys = h.keys(); 
-           keys.hasMoreElements();
+      for (Iterator keys = h.iterator(); 
+           keys.hasNext();
           /* no increment portion */
           )
       {
-        Object key = keys.nextElement();
+        Object key = keys.next();
         String keyStr = (String) key;
         try
         {
@@ -559,11 +561,11 @@
    * @see #jarNames
    * @see #checkPathForJars(String, String[])
    */
-  protected void checkSystemProperties(Hashtable h)
+  protected void checkSystemProperties(org.eclipse.collections.impl.map.mutable.ConcurrentHashMap h)
   {
 
     if (null == h)
-      h = new Hashtable();
+      h = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 
     // Grab java version for later use
     try
@@ -778,11 +780,11 @@
    *
    * @param h Hashtable to put information in
    */
-  protected void checkJAXPVersion(Hashtable h)
+  protected void checkJAXPVersion(org.eclipse.collections.impl.map.mutable.ConcurrentHashMap h)
   {
 
     if (null == h)
-      h = new Hashtable();
+      h = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 
     final Class noArgs[] = new Class[0];
     Class clazz = null;
@@ -828,11 +830,11 @@
    *
    * @param h Hashtable to put information in
    */
-  protected void checkProcessorVersion(Hashtable h)
+  protected void checkProcessorVersion(org.eclipse.collections.impl.map.mutable.ConcurrentHashMap h)
   {
 
     if (null == h)
-      h = new Hashtable();
+      h = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 
     try
     {
@@ -917,11 +919,11 @@
    *
    * @param h Hashtable to put information in
    */
-  protected void checkParserVersion(Hashtable h)
+  protected void checkParserVersion(org.eclipse.collections.impl.map.mutable.ConcurrentHashMap h)
   {
 
     if (null == h)
-      h = new Hashtable();
+      h = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 
     try
     {
@@ -981,11 +983,11 @@
    *
    * @param h Hashtable to put information in
    */
-  protected void checkAntVersion(Hashtable h)
+  protected void checkAntVersion(org.eclipse.collections.impl.map.mutable.ConcurrentHashMap h)
   {
 
     if (null == h)
-      h = new Hashtable();
+      h = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 
     try
     {
@@ -1016,11 +1018,11 @@
    *
    * @param h Hashtable to put information in
    */
-  protected void checkDOMVersion(Hashtable h)
+  protected void checkDOMVersion(org.eclipse.collections.impl.map.mutable.ConcurrentHashMap h)
   {
 
     if (null == h)
-      h = new Hashtable();
+      h = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 
     final String DOM_LEVEL2_CLASS = "org.w3c.dom.Document";
     final String DOM_LEVEL2_METHOD = "createElementNS";  // String, String
@@ -1094,11 +1096,11 @@
    *
    * @param h Hashtable to put information in
    */
-  protected void checkSAXVersion(Hashtable h)
+  protected void checkSAXVersion(org.eclipse.collections.impl.map.mutable.ConcurrentHashMap h)
   {
 
     if (null == h)
-      h = new Hashtable();
+      h = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 
     final String SAX_VERSION1_CLASS = "org.xml.sax.Parser";
     final String SAX_VERSION1_METHOD = "parse";  // String
@@ -1181,7 +1183,7 @@
    *
    * @see #getApparentVersion(String, long)
    */
-  private static Hashtable jarVersions = new Hashtable();
+  private static org.eclipse.collections.impl.map.mutable.ConcurrentHashMap jarVersions = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 
   /** 
    * Static initializer for jarVersions table.  
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/FunctionCall.java xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/compiler/FunctionCall.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/FunctionCall.java	2007-11-22 18:43:52.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/compiler/FunctionCall.java	2018-07-15 14:52:37.130526519 -0300
@@ -27,6 +27,7 @@
 import java.util.Enumeration;
 import java.util.Hashtable;
 import java.util.Vector;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.bcel.generic.ConstantPoolGen;
 import org.apache.bcel.generic.IFEQ;
@@ -133,13 +134,13 @@
     private static final MultiHashtable _internal2Java = new MultiHashtable();
 
     // Legal conversions between Java and internal types.
-    private static final Hashtable _java2Internal = new Hashtable();
+    private static final org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _java2Internal = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
     
     // The mappings between EXSLT extension namespaces and implementation classes
-    private static final Hashtable _extensionNamespaceTable = new Hashtable();
+    private static final org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _extensionNamespaceTable = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 
     // Extension functions that are implemented in BasisLibrary
-    private static final Hashtable _extensionFunctionTable = new Hashtable();
+    private static final org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _extensionFunctionTable = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
     /**
      * inner class to used in internal2Java mappings, contains
      * the Java type and the distance between the internal type and
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/LiteralElement.java xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/compiler/LiteralElement.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/LiteralElement.java	2007-11-22 18:43:52.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/compiler/LiteralElement.java	2018-07-15 14:53:29.740644888 -0300
@@ -24,6 +24,8 @@
 import java.util.Enumeration;
 import java.util.Hashtable;
 import java.util.Vector;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.Iterator;
 
 import org.apache.bcel.generic.ConstantPoolGen;
 import org.apache.bcel.generic.InstructionList;
@@ -48,7 +50,7 @@
     private String _name;
     private LiteralElement _literalElemParent = null;
     private Vector _attributeElements = null;
-    private Hashtable _accessedPrefixes = null;
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _accessedPrefixes = null;
     
     // True if all attributes of this LRE are unique, i.e. they all have
     // different names. This flag is set to false if some attribute
@@ -105,7 +107,7 @@
 
 	// Check if we have any declared namesaces
 	if (_accessedPrefixes == null) {
-	    _accessedPrefixes = new Hashtable();
+	    _accessedPrefixes = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 	}
 	else {
 	    if (!declared) {
@@ -354,10 +356,10 @@
 	// Compile code to emit namespace attributes
 	if (_accessedPrefixes != null) {
 	    boolean declaresDefaultNS = false;
-	    Enumeration e = _accessedPrefixes.keys();
+	    Iterator e = _accessedPrefixes.keySet().iterator();
 
-	    while (e.hasMoreElements()) {
-		final String prefix = (String)e.nextElement();
+	    while (e.hasNext()) {
+		final String prefix = (String)e.next();
 		final String uri = (String)_accessedPrefixes.get(prefix);
 
 		if (uri != Constants.EMPTYSTRING || 
@@ -443,7 +445,7 @@
     	 
     	 if (_attributeElements != null) {
     	     int numAttrs = _attributeElements.size();
-    	     Hashtable attrsTable = null;
+    	     org.eclipse.collections.impl.map.mutable.ConcurrentHashMap attrsTable = null;
     	     for (int i = 0; i < numAttrs; i++) {
     	         SyntaxTreeNode node = (SyntaxTreeNode)_attributeElements.elementAt(i);
     	         
@@ -452,7 +454,7 @@
     	         }
     	         else if (node instanceof XslAttribute) {   	             
     	             if (attrsTable == null) {
-    	             	attrsTable = new Hashtable();
+    	             	attrsTable = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
     	                 for (int k = 0; k < i; k++) {
     	                     SyntaxTreeNode n = (SyntaxTreeNode)_attributeElements.elementAt(k);
     	                     if (n instanceof LiteralAttribute) {
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/Mode.java xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/compiler/Mode.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/Mode.java	2007-11-22 18:43:52.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/compiler/Mode.java	2018-07-15 15:36:22.485052031 -0300
@@ -25,6 +25,7 @@
 import java.util.Hashtable;
 import java.util.Iterator;
 import java.util.Vector;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.bcel.generic.Instruction;
 import org.apache.bcel.generic.BranchHandle;
@@ -131,17 +132,17 @@
     /**
      * A mapping between named templates and Mode objects.
      */
-    private Hashtable _namedTemplates = new Hashtable();
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _namedTemplates = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 
     /**
      * A mapping between templates and instruction handles.
      */
-    private Hashtable _templateIHs = new Hashtable();
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _templateIHs = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 
     /**
      * A mapping between templates and instruction lists.
      */
-    private Hashtable _templateILs = new Hashtable();
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _templateILs = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 
     /**
      * A reference to the pattern matching the root node.
@@ -152,7 +153,7 @@
      * Stores ranges of template precendences for the compilation 
      * of apply-imports (a Hashtable for historical reasons).
      */
-    private Hashtable _importLevels = null;
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _importLevels = null;
 
     /**
      * A mapping between key names and keys.
@@ -193,7 +194,7 @@
 
     public String functionName(int min, int max) {
 	if (_importLevels == null) {
-	    _importLevels = new Hashtable();
+	    _importLevels = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 	}
 	_importLevels.put(new Integer(max), new Integer(min));
 	return _methodName + '_' + max;
@@ -558,15 +559,15 @@
 				  MethodGenerator methodGen,
 				  InstructionHandle next) 
     {
-        Enumeration templates = _namedTemplates.keys();
-        while (templates.hasMoreElements()) {
-            final Template template = (Template)templates.nextElement();
+        Iterator templates = _namedTemplates.keySet().iterator();
+        while (templates.hasNext()) {
+            final Template template = (Template)templates.next();
             compileNamedTemplate(template, classGen);
         }
 
-	templates = _neededTemplates.keys();
-	while (templates.hasMoreElements()) {
-	    final Template template = (Template)templates.nextElement();
+	templates = _neededTemplates.keySet().iterator();
+	while (templates.hasNext()) {
+	    final Template template = (Template)templates.next();
 	    if (template.hasContents()) {
 		// !!! TODO templates both named and matched
 		InstructionList til = template.compile(classGen, methodGen);
@@ -1043,9 +1044,9 @@
 
 	// Compile method(s) for <xsl:apply-imports/> for this mode
 	if (_importLevels != null) {
-	    Enumeration levels = _importLevels.keys();
-	    while (levels.hasMoreElements()) {
-		Integer max = (Integer)levels.nextElement();
+	    Iterator levels = _importLevels.keySet().iterator();
+	    while (levels.hasNext()) {
+		Integer max = (Integer)levels.next();
 		Integer min = (Integer)_importLevels.get(max);
 		compileApplyImports(classGen, min.intValue(), max.intValue());
 	    }
@@ -1081,10 +1082,10 @@
 	final Vector names      = xsltc.getNamesIndex();
 
 	// Clear some datastructures
-	_namedTemplates = new Hashtable();
+	_namedTemplates = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 	_neededTemplates = new Hashtable();
-	_templateIHs = new Hashtable();
-	_templateILs = new Hashtable();
+	_templateIHs = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
+	_templateILs = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 	_patternGroups = new Vector[32];
 	_rootPattern = null;
 
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/Parser.java xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/compiler/Parser.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/Parser.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/compiler/Parser.java	2018-07-15 14:58:46.604338159 -0300
@@ -31,6 +31,7 @@
 import java.util.Stack;
 import java.util.StringTokenizer;
 import java.util.Vector;
+import java.util.concurrent.ConcurrentHashMap;
 
 import java_cup.runtime.Symbol;
 import javax.xml.XMLConstants;
@@ -70,14 +71,14 @@
     private Vector _errors;           // Contains all compilation errors
     private Vector _warnings;         // Contains all compilation errors
 
-    private Hashtable   _instructionClasses; // Maps instructions to classes
-    private Hashtable   _instructionAttrs;;  // reqd and opt attrs 
-    private Hashtable   _qNames;
-    private Hashtable   _namespaces;
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap   _instructionClasses; // Maps instructions to classes
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap   _instructionAttrs;;  // reqd and opt attrs 
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap   _qNames;
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap   _namespaces;
     private QName       _useAttributeSets;
     private QName       _excludeResultPrefixes;
     private QName       _extensionElementPrefixes;
-    private Hashtable   _variableScope;
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap   _variableScope;
     private Stylesheet  _currentStylesheet;
     private SymbolTable _symbolTable; // Maps QNames to syntax-tree nodes
     private Output      _output;
@@ -96,11 +97,11 @@
     }
 
     public void init() {
-	_qNames              = new Hashtable(512);
-	_namespaces          = new Hashtable();
-	_instructionClasses  = new Hashtable();
-	_instructionAttrs    = new Hashtable();
-	_variableScope       = new Hashtable();
+	_qNames              = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap(512);
+	_namespaces          = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
+	_instructionClasses  = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
+	_instructionAttrs    = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
+	_variableScope       = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 	_template            = null;
 	_errors              = new Vector();
 	_warnings            = new Vector();
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/Stylesheet.java xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/compiler/Stylesheet.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/Stylesheet.java	2007-11-22 18:43:55.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/compiler/Stylesheet.java	2018-07-15 15:03:43.106348577 -0300
@@ -22,6 +22,7 @@
 package org.apache.xalan.xsltc.compiler;
 
 import java.util.Vector;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.Enumeration;
 import java.util.Hashtable;
 import java.util.Iterator;
@@ -116,7 +117,7 @@
     /**
      * Mapping between mode names and Mode instances.
      */
-    private final Hashtable _modes = new Hashtable();
+    private final org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _modes = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
     
     /**
      * A reference to the default Mode object.
@@ -126,7 +127,7 @@
     /**
      * Mapping between extension URIs and their prefixes.
      */
-    private final Hashtable _extensions = new Hashtable();
+    private final org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _extensions = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 
     /**
      * Reference to the stylesheet from which this stylesheet was
@@ -601,18 +602,18 @@
 	if (_defaultMode == null)
 	    _defaultMode = new Mode(null, this, Constants.EMPTYSTRING);
 	_defaultMode.processPatterns(_keys);
-	final Enumeration modes = _modes.elements();
-	while (modes.hasMoreElements()) {
-	    final Mode mode = (Mode)modes.nextElement();
+	final Iterator modes = _modes.iterator();
+	while (modes.hasNext()) {
+	    final Mode mode = (Mode)modes.next();
 	    mode.processPatterns(_keys);
 	}
     }
 	
     private void compileModes(ClassGenerator classGen) {
 	_defaultMode.compileApplyTemplates(classGen);
-	final Enumeration modes = _modes.elements();
-	while (modes.hasMoreElements()) {
-	    final Mode mode = (Mode)modes.nextElement();
+	final Iterator modes = _modes.iterator();
+	while (modes.hasNext()) {
+	    final Mode mode = (Mode)modes.next();
 	    mode.compileApplyTemplates(classGen);
 	}
     }
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/SymbolTable.java xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/compiler/SymbolTable.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/SymbolTable.java	2007-11-22 18:43:53.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/compiler/SymbolTable.java	2018-07-15 15:05:12.046343032 -0300
@@ -24,6 +24,7 @@
 import java.util.Hashtable;
 import java.util.StringTokenizer;
 import java.util.Vector;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.xalan.xsltc.compiler.util.MethodType;
 
@@ -35,17 +36,17 @@
 final class SymbolTable {
 
     // These hashtables are used for all stylesheets
-    private final Hashtable _stylesheets = new Hashtable();
-    private final Hashtable _primops     = new Hashtable();
+    private final org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _stylesheets = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
+    private final org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _primops     = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 
     // These hashtables are used for some stylesheets
-    private Hashtable _variables = null;
-    private Hashtable _templates = null;
-    private Hashtable _attributeSets = null;
-    private Hashtable _aliases = null;
-    private Hashtable _excludedURI = null;
-    private Hashtable _decimalFormats = null;
-    private Hashtable _keys = null;
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _variables = null;
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _templates = null;
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _attributeSets = null;
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _aliases = null;
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _excludedURI = null;
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _decimalFormats = null;
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _keys = null;
 
     public DecimalFormatting getDecimalFormatting(QName name) {
 	if (_decimalFormats == null) return null;
@@ -53,7 +54,7 @@
     }
 
     public void addDecimalFormatting(QName name, DecimalFormatting symbols) {
-	if (_decimalFormats == null) _decimalFormats = new Hashtable();
+	if (_decimalFormats == null) _decimalFormats = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 	_decimalFormats.put(name, symbols);
     }
 
@@ -63,7 +64,7 @@
     }
 
     public void addKey(QName name, Key key) {
-	if (_keys == null) _keys = new Hashtable();
+	if (_keys == null) _keys = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 	_keys.put(name, key);
     }
     
@@ -77,7 +78,7 @@
 
     public Template addTemplate(Template template) {
 	final QName name = template.getName();
-	if (_templates == null) _templates = new Hashtable();
+	if (_templates == null) _templates = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 	return (Template)_templates.put(name, template);
     }
 	
@@ -87,13 +88,13 @@
     }
 
     public Variable addVariable(Variable variable) {
-	if (_variables == null) _variables = new Hashtable();
+	if (_variables == null) _variables = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 	final String name = variable.getName().getStringRep();
 	return (Variable)_variables.put(name, variable);
     }
 	
     public Param addParam(Param parameter) {
-	if (_variables == null) _variables = new Hashtable();
+	if (_variables == null) _variables = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 	final String name = parameter.getName().getStringRep();
 	return (Param)_variables.put(name, parameter);
     }
@@ -119,7 +120,7 @@
     }
 
     public AttributeSet addAttributeSet(AttributeSet atts) {
-	if (_attributeSets == null) _attributeSets = new Hashtable();
+	if (_attributeSets == null) _attributeSets = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 	return (AttributeSet)_attributeSets.put(atts.getName(), atts);
     }
 
@@ -177,7 +178,7 @@
      * Adds an alias for a namespace prefix
      */ 
     public void addPrefixAlias(String prefix, String alias) {
-	if (_aliases == null) _aliases = new Hashtable();
+	if (_aliases == null) _aliases = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 	_aliases.put(prefix,alias);
     }
 
@@ -198,7 +199,7 @@
 	if (uri == null) return;
 
 	// Create new hashtable of exlcuded URIs if none exists
-	if (_excludedURI == null) _excludedURI = new Hashtable();
+	if (_excludedURI == null) _excludedURI = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 
 	// Register the namespace URI
 	Integer refcnt = (Integer)_excludedURI.get(uri);
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/SyntaxTreeNode.java xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/compiler/SyntaxTreeNode.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/SyntaxTreeNode.java	2007-11-22 18:43:53.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/compiler/SyntaxTreeNode.java	2018-07-15 04:57:43.801622603 -0300
@@ -24,6 +24,7 @@
 import java.util.Enumeration;
 import java.util.Hashtable;
 import java.util.Vector;
+import java.util.concurrent.ConcurrentHashMap;
 
 import org.apache.bcel.generic.ANEWARRAY;
 import org.apache.bcel.generic.BasicType;
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/UseAttributeSets.java xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/compiler/UseAttributeSets.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/UseAttributeSets.java	2007-11-22 18:43:53.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/compiler/UseAttributeSets.java	2018-07-15 04:59:12.314894860 -0300
@@ -21,8 +21,11 @@
 
 package org.apache.xalan.xsltc.compiler;
 
+import java.util.ArrayList;
 import java.util.StringTokenizer;
 import java.util.Vector;
+import java.util.Collections;
+import java.util.List;
 
 import org.apache.bcel.generic.ConstantPoolGen;
 import org.apache.bcel.generic.INVOKESPECIAL;
@@ -45,7 +48,7 @@
 	"";
 
     // Contains the names of all references attribute sets
-    private final Vector _sets = new Vector(2);
+    private final List _sets = Collections.synchronizedList(new ArrayList(2));
 
     /**
      * Constructur - define initial attribute sets to use
@@ -90,7 +93,7 @@
 	// Go through each attribute set and generate a method call
 	for (int i=0; i<_sets.size(); i++) {
 	    // Get the attribute set name
-	    final QName name = (QName)_sets.elementAt(i);
+	    final QName name = (QName)_sets.get(i);
 	    // Get the AttributeSet reference from the symbol table
 	    final AttributeSet attrs = symbolTable.lookupAttributeSet(name);
 	    // Compile the call to the set's method if the set exists
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/XSLTC.java xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/compiler/XSLTC.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/XSLTC.java	2007-11-22 18:43:52.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/compiler/XSLTC.java	2018-07-15 15:06:57.366075389 -0300
@@ -35,6 +35,7 @@
 import java.util.Map;
 import java.util.Properties;
 import java.util.Vector;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.jar.JarEntry;
 import java.util.jar.JarOutputStream;
 import java.util.jar.Manifest;
@@ -81,14 +82,14 @@
     // Name index tables
     private int       _nextGType;  // Next available element type
     private Vector    _namesIndex; // Index of all registered QNames
-    private Hashtable _elements;   // Hashtable of all registered elements
-    private Hashtable _attributes; // Hashtable of all registered attributes
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _elements;   // Hashtable of all registered elements
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _attributes; // Hashtable of all registered attributes
 
     // Namespace index tables
     private int       _nextNSType; // Next available namespace type
     private Vector    _namespaceIndex; // Index of all registered namespaces
-    private Hashtable _namespaces; // Hashtable of all registered namespaces
-    private Hashtable _namespacePrefixes;// Hashtable of all registered namespace prefixes
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _namespaces; // Hashtable of all registered namespaces
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _namespacePrefixes;// Hashtable of all registered namespace prefixes
 
 
     // All literal text in the stylesheet
@@ -191,13 +192,13 @@
      */
     private void reset() {
 	_nextGType      = DTM.NTYPES;
-	_elements       = new Hashtable();
-	_attributes     = new Hashtable();
-	_namespaces     = new Hashtable();
+	_elements       = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
+	_attributes     = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
+	_namespaces     = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
 	_namespaces.put("",new Integer(_nextNSType));
 	_namesIndex     = new Vector(128);
 	_namespaceIndex = new Vector(32);
-	_namespacePrefixes = new Hashtable();
+	_namespacePrefixes = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
         _stylesheet     = null;
 	_parser.init();
 	//_variableSerial     = 1;
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/dom/DocumentCache.java xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/dom/DocumentCache.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/dom/DocumentCache.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/dom/DocumentCache.java	2018-07-15 15:08:11.257746081 -0300
@@ -28,6 +28,7 @@
 import java.net.URLDecoder;
 import java.util.Date;
 import java.util.Hashtable;
+import java.util.concurrent.ConcurrentHashMap;
 
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.parsers.SAXParser;
@@ -54,7 +55,7 @@
 public final class DocumentCache implements DOMCache {
 
     private int       _size;
-    private Hashtable _references;
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _references;
     private String[]  _URIs;
     private int       _count;
     private int       _current;
@@ -169,7 +170,7 @@
 	_count = 0;
 	_current = 0;
 	_size  = size;
-	_references = new Hashtable(_size+2);
+	_references = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap(_size+2);
 	_URIs = new String[_size];
 
 	try {
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/runtime/AbstractTranslet.java xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/runtime/AbstractTranslet.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/runtime/AbstractTranslet.java	2007-11-22 18:43:52.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/runtime/AbstractTranslet.java	2018-07-15 04:29:52.043475349 -0300
@@ -46,6 +46,7 @@
 import org.apache.xalan.xsltc.runtime.output.TransletOutputHandlerFactory;
 import org.apache.xml.dtm.DTMAxisIterator;
 import org.apache.xml.serializer.SerializationHandler;
+import org.apache.commons.collections4.list.TreeList;
 
 /**
  * @author Jacek Ambroziak
@@ -136,7 +137,7 @@
     // Parameter's stack: <tt>pbase</tt> and <tt>pframe</tt> are used 
     // to denote the current parameter frame.
     protected int pbase = 0, pframe = 0;
-    protected ArrayList paramsStack = new ArrayList();
+    protected TreeList paramsStack = new TreeList();
 
     /**
      * Push a new parameter frame.
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/trax/TransformerFactoryImpl.java xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/trax/TransformerFactoryImpl.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/trax/TransformerFactoryImpl.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/xsltc/trax/TransformerFactoryImpl.java	2018-07-15 04:29:52.043475349 -0300
@@ -137,7 +137,7 @@
      * This Hashtable is used to store parameters for locating
      * <?xml-stylesheet ...?> processing instructions in XML docs.
      */
-    private Hashtable _piParams = null;
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap _piParams = null;
 
     /**
      * The above hashtable stores objects of this class.
diff -ur xalan-j_2_7_1/src/org/apache/xml/utils/ObjectPool.java xalan-j_2_7_1-modified/src/org/apache/xml/utils/ObjectPool.java
--- xalan-j_2_7_1/src/org/apache/xml/utils/ObjectPool.java	2007-11-22 18:43:52.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xml/utils/ObjectPool.java	2018-07-15 04:38:44.999368685 -0300
@@ -21,6 +21,7 @@
 package org.apache.xml.utils;
 
 import java.util.ArrayList;
+import org.apache.commons.collections4.list.TreeList;
 
 import org.apache.xml.res.XMLErrorResources;
 import org.apache.xml.res.XMLMessages;
@@ -40,7 +41,7 @@
 
   /** Stack of given objects this points to.
    *  @serial          */
-  private final ArrayList freeStack;
+  private final TreeList freeStack;
 
   /**
    * Constructor ObjectPool
@@ -50,7 +51,7 @@
   public ObjectPool(Class type)
   {
     objectType = type;
-    freeStack = new ArrayList();
+    freeStack = new TreeList();
   }
   
   /**
@@ -69,7 +70,7 @@
     {
       throw new WrappedRuntimeException(cnfe);
     }
-    freeStack = new ArrayList();
+    freeStack = new TreeList();
   }
 
 
@@ -83,7 +84,7 @@
   public ObjectPool(Class type, int size)
   {
     objectType = type;
-    freeStack = new ArrayList(size);
+    freeStack = new TreeList();
   }
 
   /**
@@ -93,7 +94,7 @@
   public ObjectPool()
   {
     objectType = null;
-    freeStack = new ArrayList();
+    freeStack = new TreeList();
   }
 
   /**
diff -ur xalan-j_2_7_1/src/org/apache/xml/utils/XMLReaderManager.java xalan-j_2_7_1-modified/src/org/apache/xml/utils/XMLReaderManager.java
--- xalan-j_2_7_1/src/org/apache/xml/utils/XMLReaderManager.java	2007-11-22 18:43:53.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xml/utils/XMLReaderManager.java	2018-07-15 15:08:46.785551422 -0300
@@ -21,6 +21,7 @@
 package org.apache.xml.utils;
 
 import java.util.Hashtable;
+import java.util.concurrent.ConcurrentHashMap;
 
 import javax.xml.parsers.FactoryConfigurationError;
 import javax.xml.parsers.ParserConfigurationException;
@@ -56,7 +57,7 @@
     /**
      * Keeps track of whether an XMLReader object is in use.
      */
-    private Hashtable m_inUse;
+    private org.eclipse.collections.impl.map.mutable.ConcurrentHashMap m_inUse;
 
     /**
      * Hidden constructor
@@ -88,7 +89,7 @@
         }
 
         if (m_inUse == null) {
-            m_inUse = new Hashtable();
+            m_inUse = new org.eclipse.collections.impl.map.mutable.ConcurrentHashMap();
         }
 
         // If the cached reader for this thread is in use, construct a new
