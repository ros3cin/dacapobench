diff -ur xalan-j_2_7_1/build.xml xalan-j_2_7_1-modified-with-recommendations/build.xml
--- xalan-j_2_7_1/build.xml	2007-11-22 18:44:01.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/build.xml	2018-03-16 01:22:33.831578090 -0300
@@ -104,6 +104,12 @@
   <property name="runtime.jar"            value="${lib.dir}/${runtime.jar.name}"/>
   <property name="regexp.jar.name"        value="regexp.jar"/>
   <property name="regexp.jar"             value="${lib.dir}/${regexp.jar.name}"/>
+  <property name="eclipse_collections_api.jar.name"        value="eclipse-collections-api-9.1.0.jar"/>
+  <property name="eclipse_collections_api.jar"             value="${lib.dir}/${eclipse_collections_api.jar.name}"/>
+  <property name="eclipse_collections_impl.jar.name"        value="eclipse-collections-9.1.0.jar"/>
+  <property name="eclipse_collections_impl.jar"             value="${lib.dir}/${eclipse_collections_impl.jar.name}"/>
+  <property name="jsr166e.jar.name"        value="jsr166e-1.0.jar"/>
+  <property name="jsr166e.jar"             value="${lib.dir}/${jsr166e.jar.name}"/>
   
   <!-- Jars need to build Xalan Java (Interpretive, Compiled, or both) or build the docs -->
   <property name="java_cup.jar.name"      value="java_cup.jar"/>
@@ -205,6 +211,9 @@
     <pathelement location="${taglet.jar}" />
     <pathelement location="${build.serializer.jar}" />
     <pathelement location="${build.xalan.jar}" />
+    <pathelement location="${eclipse_collections_api.jar}" />
+    <pathelement location="${eclipse_collections_impl.jar}" />
+    <pathelement location="${jsr166e.jar}" />
     <pathelement path="${java.class.path}" />
   </path>
   <path id="samples.class.path">
@@ -212,6 +221,9 @@
     <pathelement location="${build.serializer.jar}" />    
     <pathelement location="${parser.jar}" />  
     <pathelement location="${build.xalan.jar}" />
+    <pathelement location="${eclipse_collections_api.jar}" />
+    <pathelement location="${eclipse_collections_impl.jar}" />
+    <pathelement location="${jsr166e.jar}" />
     <pathelement path="${java.class.path}" />
   </path>
   <path id="compile.class.path">
@@ -221,6 +233,9 @@
     <pathelement location="${xmlapis.jar}" />
     <pathelement location="${build.serializer.jar}" />
     <pathelement location="${parser.jar}" />
+    <pathelement location="${eclipse_collections_api.jar}" />
+    <pathelement location="${eclipse_collections_impl.jar}" />
+    <pathelement location="${jsr166e.jar}" />
     <pathelement path="${java.class.path}" />
   </path>
   <path id="xslt.boot.class.path">
@@ -233,11 +248,17 @@
     <pathelement location="${xmlapis.jar}" />
     <pathelement location="${build.serializer.jar}" />    
     <pathelement location="${parser.jar}" />   
+    <pathelement location="${eclipse_collections_api.jar}" />
+    <pathelement location="${eclipse_collections_impl.jar}" />
+    <pathelement location="${jsr166e.jar}" />
     <pathelement path="${build.boot.class.path}" />
     <pathelement path="${sun.boot.class.path}" />
   </path>
   <path id="compile.source.path">
     <dirset dir="${src.dir}" includes="/org/apache/**" />
+    <pathelement location="${eclipse_collections_api.jar}" />
+    <pathelement location="${eclipse_collections_impl.jar}" />
+    <pathelement location="${jsr166e.jar}" />
   </path>
 
   <!-- patternsets for source and binary distribution packages -->
@@ -251,6 +272,9 @@
     <include name="${dist.file}/${xmlapis.jar.name}"/>
     <include name="${dist.file}/${parser.jar.name}"/>
     <include name="${dist.file}/${serializer.jar.name}"/>
+    <include name="${dist.file}/${eclipse_collections_api.jar.name}"/>
+    <include name="${dist.file}/${eclipse_collections_impl.jar.name}"/>
+    <include name="${dist.file}/${jsr166e.jar.name}"/>
     <include name="${dist.file}/samples/"/>    
     <include name="${dist.file}/samples/xalansamples.jar"/>
     <include name="${dist.file}/samples/xalanservlet.war"/>
@@ -270,6 +294,9 @@
     <include name="${dist.file}/${xmlapis.jar.name}"/>
     <include name="${dist.file}/${parser.jar.name}"/>
     <include name="${dist.file}/${serializer.jar.name}"/>
+    <include name="${dist.file}/${eclipse_collections_api.jar.name}"/>
+    <include name="${dist.file}/${eclipse_collections_impl.jar.name}"/>
+    <include name="${dist.file}/${jsr166e.jar.name}"/>
     <include name="${dist.file}/samples/"/>        
     <include name="${dist.file}/samples/xalansamples.jar"/>
     <include name="${dist.file}/samples/xalanservlet.war"/>
@@ -305,6 +332,9 @@
     <include name="${dist.file}/tools/${jlex.jar.name}"/>
     <include name="${dist.file}/lib/${runtime.jar.name}"/>
     <include name="${dist.file}/lib/${regexp.jar.name}"/>
+    <include name="${dist.file}/lib/${eclipse_collections_api.jar.name}"/>
+    <include name="${dist.file}/lib/${eclipse_collections_impl.jar.name}"/>
+    <include name="${dist.file}/${jsr166e.jar.name}"/>
   </patternset>
 
   <!-- =================================================================== -->
@@ -431,6 +461,9 @@
     <pathelement location="${jlex.jar}" />
     <pathelement location="${java_cup.jar}" />
     <pathelement location="${runtime.jar}" />
+    <pathelement location="${eclipse_collections_api.jar}" />
+    <pathelement location="${eclipse_collections_impl.jar}" />
+    <pathelement location="${jsr166e.jar}"/>
     <!-- build.classes needed for 
          org.apache.xalan.xsltc.util.JavaCupRedirect -->
     <pathelement location="${build.classes}" />
@@ -559,6 +592,12 @@
     <!-- remove the jar file -->
     <delete file="${build.classes}/${param_jar_name}" />
   </target>
+
+  <!-- A parametrized target which is used to copy and expand a XSLTC support jar -->
+  <target name="xsltc.copy-deps-jar-not-unjared" unless="${param_unless}">
+    <!-- copy the jar file to the build/classes directory -->
+    <copy todir="${build.dir}" file="${lib.dir}/${param_jar_name}"/>
+  </target>
   
   <!-- Copy and expand the XSLTC support jars if needed -->
   <target name="xsltc.copy-deps-jars" depends="xsltc.copy-licenses">
@@ -592,6 +631,21 @@
       <param name="param_unless" value="xsltc.regexp_jar.not_needed" />
       <param name="param_jar_name" value="${regexp.jar.name}" />
     </antcall>
+
+    <antcall target="xsltc.copy-deps-jar-not-unjared">
+      <param name="param_unless" value="" />
+      <param name="param_jar_name" value="${eclipse_collections_api.jar.name}" />
+    </antcall>
+
+    <antcall target="xsltc.copy-deps-jar-not-unjared">
+      <param name="param_unless" value="" />
+      <param name="param_jar_name" value="${eclipse_collections_impl.jar.name}" />
+    </antcall>
+
+    <antcall target="xsltc.copy-deps-jar-not-unjared">
+      <param name="param_unless" value="" />
+      <param name="param_jar_name" value="${jsr166e.jar.name}" />
+    </antcall>
     
     <!-- remove the old META-INF/MANIFEST.MF file -->
     <delete file="${build.classes}/META-INF/MANIFEST.MF" quiet="true"/>  
Only in xalan-j_2_7_1-modified-with-recommendations/lib: eclipse-collections-9.1.0.jar
Only in xalan-j_2_7_1-modified-with-recommendations/lib: eclipse-collections-api-9.1.0.jar
Only in xalan-j_2_7_1-modified-with-recommendations/lib: jsr166e-1.0.jar
diff -ur xalan-j_2_7_1/src/MANIFEST.MF xalan-j_2_7_1-modified-with-recommendations/src/MANIFEST.MF
--- xalan-j_2_7_1/src/MANIFEST.MF	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/src/MANIFEST.MF	2018-03-15 01:32:16.084124000 -0300
@@ -1,8 +1,7 @@
 Manifest-Version: 1.0
 Created-By: @java.version@ (@java.vendor@)
 Main-Class: org.apache.xalan.xslt.Process
-Class-Path: xercesImpl.jar xml-apis.jar serializer.jar
-
+Class-Path: xercesImpl.jar xml-apis.jar serializer.jar eclipse-collections-api-9.1.0.jar eclipse-collections-9.1.0.jar jsr166e-1.0.jar
 
 Name: org/apache/xalan/
 Comment: Main Xalan engine implementing TrAX/JAXP
diff -ur xalan-j_2_7_1/src/org/apache/xalan/extensions/ExtensionHandlerGeneral.java xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/extensions/ExtensionHandlerGeneral.java
--- xalan-j_2_7_1/src/org/apache/xalan/extensions/ExtensionHandlerGeneral.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/extensions/ExtensionHandlerGeneral.java	2018-03-16 00:51:31.467868078 -0300
@@ -46,6 +46,8 @@
 import org.apache.xpath.functions.FuncExtFunction;
 import org.apache.xpath.objects.XObject;
 
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
+
 /**
  * Class handling an extension namespace for XPath. Provides functions
  * to test a function's existence and call a function
@@ -63,10 +65,10 @@
   private String m_scriptSrcURL;  
 
   /** functions of namespace        */
-  private Hashtable m_functions = new Hashtable();  
+  private ConcurrentHashMap m_functions = new ConcurrentHashMap();  
 
   /** elements of namespace         */
-  private Hashtable m_elements = new Hashtable();   
+  private ConcurrentHashMap m_elements = new ConcurrentHashMap();   
 
   // BSF objects used to invoke BSF by reflection.  Do not import the BSF classes
   // since we don't want a compile dependency on BSF.
diff -ur xalan-j_2_7_1/src/org/apache/xalan/extensions/ExtensionHandlerJava.java xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/extensions/ExtensionHandlerJava.java
--- xalan-j_2_7_1/src/org/apache/xalan/extensions/ExtensionHandlerJava.java	2007-11-22 18:43:52.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/extensions/ExtensionHandlerJava.java	2018-03-16 00:56:17.527095032 -0300
@@ -21,6 +21,7 @@
 package org.apache.xalan.extensions;
 
 import java.util.Hashtable;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 /**
  * Abstract base class handling the java language extensions for XPath.
@@ -36,7 +37,7 @@
   protected String m_className = "";
 
   /** Table of cached methods          */
-  private Hashtable m_cachedMethods = new Hashtable();
+  private ConcurrentHashMap m_cachedMethods = new ConcurrentHashMap();
 
   /**
    * Construct a new extension handler given all the information
diff -ur xalan-j_2_7_1/src/org/apache/xalan/lib/ExsltSets.java xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/lib/ExsltSets.java
--- xalan-j_2_7_1/src/org/apache/xalan/lib/ExsltSets.java	2007-11-22 18:43:55.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/lib/ExsltSets.java	2018-03-16 00:59:56.890237562 -0300
@@ -21,6 +21,7 @@
 package org.apache.xalan.lib;
 
 import java.util.HashMap;
+import java.util.WeakHashMap;
 import java.util.Map;
 
 import org.apache.xml.utils.DOMHelper;
@@ -191,7 +192,7 @@
     NodeSet dist = new NodeSet();
     dist.setShouldCacheNodes(true);
 
-    Map stringTable = new HashMap();
+    Map stringTable = new WeakHashMap();
     
     for (int i = 0; i < nl.getLength(); i++)
     {
diff -ur xalan-j_2_7_1/src/org/apache/xalan/lib/sql/ConnectionPoolManager.java xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/lib/sql/ConnectionPoolManager.java
--- xalan-j_2_7_1/src/org/apache/xalan/lib/sql/ConnectionPoolManager.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/lib/sql/ConnectionPoolManager.java	2018-03-16 01:00:58.190346743 -0300
@@ -26,6 +26,7 @@
 
 import org.apache.xalan.res.XSLMessages;
 import org.apache.xalan.res.XSLTErrorResources;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 /**
  */
@@ -33,7 +34,7 @@
 {
   /**
    */
-  private static Hashtable m_poolTable = null;
+  private static ConcurrentHashMap m_poolTable = null;
 
   /**
    */
@@ -53,7 +54,7 @@
      * Initialize the pool table
      */   
     if (m_poolTable == null)
-            m_poolTable = new Hashtable();
+            m_poolTable = new ConcurrentHashMap();
   }
 
   /**
diff -ur xalan-j_2_7_1/src/org/apache/xalan/lib/sql/QueryParameter.java xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/lib/sql/QueryParameter.java
--- xalan-j_2_7_1/src/org/apache/xalan/lib/sql/QueryParameter.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/lib/sql/QueryParameter.java	2018-03-16 01:01:39.718490449 -0300
@@ -27,6 +27,7 @@
 import java.sql.PreparedStatement;
 import java.sql.CallableStatement;
 import java.sql.Statement;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 public class QueryParameter
 {
@@ -35,7 +36,7 @@
   private String  m_value;
   private boolean m_output;
   private String  m_typeName;
-  private static  Hashtable m_Typetable = null;
+  private static  ConcurrentHashMap m_Typetable = null;
 
   public QueryParameter()
   {
@@ -148,7 +149,7 @@
     if ( m_Typetable == null )
     {
       // Load up the type mapping table.
-      m_Typetable = new Hashtable();
+      m_Typetable = new ConcurrentHashMap();
       m_Typetable.put("BIGINT", new Integer(java.sql.Types.BIGINT));
       m_Typetable.put("BINARY", new Integer(java.sql.Types.BINARY));
       m_Typetable.put("BIT", new Integer(java.sql.Types.BIT));
diff -ur xalan-j_2_7_1/src/org/apache/xalan/templates/Stylesheet.java xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/templates/Stylesheet.java
--- xalan-j_2_7_1/src/org/apache/xalan/templates/Stylesheet.java	2007-11-22 18:43:52.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/templates/Stylesheet.java	2018-03-16 01:15:00.535789215 -0300
@@ -26,6 +26,7 @@
 import java.util.Hashtable;
 import java.util.Stack;
 import java.util.Vector;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 import javax.xml.transform.SourceLocator;
 import javax.xml.transform.TransformerException;
@@ -1151,7 +1152,7 @@
    * The "non-xsl-top-level" properties.
    * @serial
    */
-  private Hashtable m_NonXslTopLevel;
+  private ConcurrentHashMap m_NonXslTopLevel;
 
   /**
    * Set found a non-xslt element.
@@ -1164,7 +1165,7 @@
   {
 
     if (null == m_NonXslTopLevel)
-      m_NonXslTopLevel = new Hashtable();
+      m_NonXslTopLevel = new ConcurrentHashMap();
 
     m_NonXslTopLevel.put(name, obj);
   }
@@ -1486,7 +1487,7 @@
       
       if(null != m_NonXslTopLevel)
       {
-      	java.util.Enumeration elements = m_NonXslTopLevel.elements();
+      	java.util.Enumeration elements = java.util.Collections.enumeration(m_NonXslTopLevel.values());
       	while(elements.hasMoreElements())
       	{
       	  ElemTemplateElement elem = (ElemTemplateElement)elements.nextElement();
diff -ur xalan-j_2_7_1/src/org/apache/xalan/templates/StylesheetRoot.java xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/templates/StylesheetRoot.java
--- xalan-j_2_7_1/src/org/apache/xalan/templates/StylesheetRoot.java	2007-11-22 18:43:53.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/templates/StylesheetRoot.java	2018-03-16 01:10:35.775783463 -0300
@@ -26,6 +26,8 @@
 import java.util.Hashtable;
 import java.util.Properties;
 import java.util.Vector;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
+import jsr166e.ConcurrentHashMapV8;
 
 import javax.xml.transform.ErrorListener;
 import javax.xml.transform.Templates;
@@ -289,9 +291,9 @@
 //  m_outputProperties = new OutputProperties(Method.XML);
     
     m_attrSets = new HashMap();
-    m_decimalFormatSymbols = new Hashtable();
+    m_decimalFormatSymbols = new ConcurrentHashMap();
     m_keyDecls = new Vector();
-    m_namespaceAliasComposed = new Hashtable();
+    m_namespaceAliasComposed = new ConcurrentHashMapV8();
     m_templateList = new TemplateList();
     m_variables = new Vector();
 
@@ -582,7 +584,7 @@
    * Table of DecimalFormatSymbols, keyed by QName.
    * @serial
    */
-  private Hashtable m_decimalFormatSymbols;
+  private ConcurrentHashMap m_decimalFormatSymbols;
 
   /**
    * Recompose the decimal-format declarations.
@@ -672,7 +674,7 @@
    * Composed set of all namespace aliases.
    * @serial
    */
-  private Hashtable m_namespaceAliasComposed;
+  private ConcurrentHashMapV8 m_namespaceAliasComposed;
 
   /**
    * Recompose the namespace-alias declarations.
diff -ur xalan-j_2_7_1/src/org/apache/xalan/templates/TemplateList.java xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/templates/TemplateList.java
--- xalan-j_2_7_1/src/org/apache/xalan/templates/TemplateList.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/templates/TemplateList.java	2018-03-16 01:08:59.098485648 -0300
@@ -23,6 +23,7 @@
 import java.util.Enumeration;
 import java.util.Hashtable;
 import java.util.Vector;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 import javax.xml.transform.TransformerException;
 
@@ -863,7 +864,7 @@
     private boolean inPatterns;
     private TemplateSubPatternAssociation curPattern;
 
-    private Hashtable m_compilerCache = new Hashtable();
+    private ConcurrentHashMap m_compilerCache = new ConcurrentHashMap();
 
     private TemplateWalker()
     {
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xslt/EnvironmentCheck.java xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/xslt/EnvironmentCheck.java
--- xalan-j_2_7_1/src/org/apache/xalan/xslt/EnvironmentCheck.java	2007-11-22 18:43:53.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/xslt/EnvironmentCheck.java	2018-03-16 01:30:10.928387832 -0300
@@ -29,6 +29,7 @@
 import java.util.Hashtable;
 import java.util.StringTokenizer;
 import java.util.Vector;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -1181,7 +1182,7 @@
    *
    * @see #getApparentVersion(String, long)
    */
-  private static Hashtable jarVersions = new Hashtable();
+  private static ConcurrentHashMap jarVersions = new ConcurrentHashMap();
 
   /** 
    * Static initializer for jarVersions table.  
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/FunctionCall.java xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/xsltc/compiler/FunctionCall.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/FunctionCall.java	2007-11-22 18:43:52.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/xsltc/compiler/FunctionCall.java	2018-03-16 01:34:56.315184877 -0300
@@ -27,6 +27,7 @@
 import java.util.Enumeration;
 import java.util.Hashtable;
 import java.util.Vector;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 import org.apache.bcel.generic.ConstantPoolGen;
 import org.apache.bcel.generic.IFEQ;
@@ -133,13 +134,13 @@
     private static final MultiHashtable _internal2Java = new MultiHashtable();
 
     // Legal conversions between Java and internal types.
-    private static final Hashtable _java2Internal = new Hashtable();
+    private static final ConcurrentHashMap _java2Internal = new ConcurrentHashMap();
     
     // The mappings between EXSLT extension namespaces and implementation classes
-    private static final Hashtable _extensionNamespaceTable = new Hashtable();
+    private static final ConcurrentHashMap _extensionNamespaceTable = new ConcurrentHashMap();
 
     // Extension functions that are implemented in BasisLibrary
-    private static final Hashtable _extensionFunctionTable = new Hashtable();
+    private static final ConcurrentHashMap _extensionFunctionTable = new ConcurrentHashMap();
     /**
      * inner class to used in internal2Java mappings, contains
      * the Java type and the distance between the internal type and
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/LiteralElement.java xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/xsltc/compiler/LiteralElement.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/LiteralElement.java	2007-11-22 18:43:52.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/xsltc/compiler/LiteralElement.java	2018-03-16 01:54:42.290186121 -0300
@@ -24,6 +24,9 @@
 import java.util.Enumeration;
 import java.util.Hashtable;
 import java.util.Vector;
+import java.util.List;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
+import org.eclipse.collections.impl.list.mutable.FastList;
 
 import org.apache.bcel.generic.ConstantPoolGen;
 import org.apache.bcel.generic.InstructionList;
@@ -47,8 +50,8 @@
 
     private String _name;
     private LiteralElement _literalElemParent = null;
-    private Vector _attributeElements = null;
-    private Hashtable _accessedPrefixes = null;
+    private List _attributeElements = null;
+    private ConcurrentHashMap _accessedPrefixes = null;
     
     // True if all attributes of this LRE are unique, i.e. they all have
     // different names. This flag is set to false if some attribute
@@ -105,7 +108,7 @@
 
 	// Check if we have any declared namesaces
 	if (_accessedPrefixes == null) {
-	    _accessedPrefixes = new Hashtable();
+	    _accessedPrefixes = new ConcurrentHashMap();
 	}
 	else {
 	    if (!declared) {
@@ -167,7 +170,7 @@
      */
     public void addAttribute(SyntaxTreeNode attribute) {
 	if (_attributeElements == null) {
-	    _attributeElements = new Vector(2);
+	    _attributeElements = (new FastList(2)).asSynchronized();
 	}
 	_attributeElements.add(attribute);
     }
@@ -177,9 +180,9 @@
      */
     public void setFirstAttribute(SyntaxTreeNode attribute) {
 	if (_attributeElements == null) {
-	    _attributeElements = new Vector(2);
+	    _attributeElements = (new FastList(2)).asSynchronized();
 	}
-	_attributeElements.insertElementAt(attribute,0);
+	_attributeElements.add(0,attribute);
     }
 
     /**
@@ -192,7 +195,7 @@
 	    final int count = _attributeElements.size();
 	    for (int i = 0; i < count; i++) {
 		SyntaxTreeNode node = 
-		    (SyntaxTreeNode)_attributeElements.elementAt(i);
+		    (SyntaxTreeNode)_attributeElements.get(i);
 		node.typeCheck(stable);
 	    }
 	}
@@ -206,7 +209,7 @@
      * to _ANY_ namespace URI. Used by literal result elements to determine
      */
     public Enumeration getNamespaceScope(SyntaxTreeNode node) {
-	Hashtable all = new Hashtable();
+	ConcurrentHashMap all = new ConcurrentHashMap();
 	
 	while (node != null) {
 	    Hashtable mapping = node.getPrefixMapping();
@@ -221,7 +224,7 @@
 	    }
 	    node = node.getParent();
 	}
-	return(all.keys());
+	return(java.util.Collections.enumeration(all.keySet()));
     }
 
     /**
@@ -354,7 +357,7 @@
 	// Compile code to emit namespace attributes
 	if (_accessedPrefixes != null) {
 	    boolean declaresDefaultNS = false;
-	    Enumeration e = _accessedPrefixes.keys();
+	    Enumeration e = java.util.Collections.enumeration(_accessedPrefixes.keySet());
 
 	    while (e.hasMoreElements()) {
 		final String prefix = (String)e.nextElement();
@@ -392,7 +395,7 @@
 	    final int count = _attributeElements.size();
 	    for (int i = 0; i < count; i++) {
 		SyntaxTreeNode node = 
-		    (SyntaxTreeNode)_attributeElements.elementAt(i);
+		    (SyntaxTreeNode)_attributeElements.get(i);
 		if (!(node instanceof XslAttribute)) {
 		    node.translate(classGen, methodGen);
 	        }
@@ -443,18 +446,18 @@
     	 
     	 if (_attributeElements != null) {
     	     int numAttrs = _attributeElements.size();
-    	     Hashtable attrsTable = null;
+    	     ConcurrentHashMap attrsTable = null;
     	     for (int i = 0; i < numAttrs; i++) {
-    	         SyntaxTreeNode node = (SyntaxTreeNode)_attributeElements.elementAt(i);
+    	         SyntaxTreeNode node = (SyntaxTreeNode)_attributeElements.get(i);
     	         
     	         if (node instanceof UseAttributeSets) {
     	             return false;
     	         }
     	         else if (node instanceof XslAttribute) {   	             
     	             if (attrsTable == null) {
-    	             	attrsTable = new Hashtable();
+    	             	attrsTable = new ConcurrentHashMap();
     	                 for (int k = 0; k < i; k++) {
-    	                     SyntaxTreeNode n = (SyntaxTreeNode)_attributeElements.elementAt(k);
+    	                     SyntaxTreeNode n = (SyntaxTreeNode)_attributeElements.get(k);
     	                     if (n instanceof LiteralAttribute) {
     	                         LiteralAttribute literalAttr = (LiteralAttribute)n;
     	                         attrsTable.put(literalAttr.getName(), literalAttr);
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/Mode.java xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/xsltc/compiler/Mode.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/Mode.java	2007-11-22 18:43:52.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/xsltc/compiler/Mode.java	2018-03-16 01:59:14.140730463 -0300
@@ -25,6 +25,7 @@
 import java.util.Hashtable;
 import java.util.Iterator;
 import java.util.Vector;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 import org.apache.bcel.generic.Instruction;
 import org.apache.bcel.generic.BranchHandle;
@@ -131,17 +132,17 @@
     /**
      * A mapping between named templates and Mode objects.
      */
-    private Hashtable _namedTemplates = new Hashtable();
+    private ConcurrentHashMap _namedTemplates = new ConcurrentHashMap();
 
     /**
      * A mapping between templates and instruction handles.
      */
-    private Hashtable _templateIHs = new Hashtable();
+    private ConcurrentHashMap _templateIHs = new ConcurrentHashMap();
 
     /**
      * A mapping between templates and instruction lists.
      */
-    private Hashtable _templateILs = new Hashtable();
+    private ConcurrentHashMap _templateILs = new ConcurrentHashMap();
 
     /**
      * A reference to the pattern matching the root node.
@@ -152,7 +153,7 @@
      * Stores ranges of template precendences for the compilation 
      * of apply-imports (a Hashtable for historical reasons).
      */
-    private Hashtable _importLevels = null;
+    private ConcurrentHashMap _importLevels = null;
 
     /**
      * A mapping between key names and keys.
@@ -193,7 +194,7 @@
 
     public String functionName(int min, int max) {
 	if (_importLevels == null) {
-	    _importLevels = new Hashtable();
+	    _importLevels = new ConcurrentHashMap();
 	}
 	_importLevels.put(new Integer(max), new Integer(min));
 	return _methodName + '_' + max;
@@ -558,7 +559,7 @@
 				  MethodGenerator methodGen,
 				  InstructionHandle next) 
     {
-        Enumeration templates = _namedTemplates.keys();
+        Enumeration templates = java.util.Collections.enumeration(_namedTemplates.keySet());
         while (templates.hasMoreElements()) {
             final Template template = (Template)templates.nextElement();
             compileNamedTemplate(template, classGen);
@@ -1043,7 +1044,7 @@
 
 	// Compile method(s) for <xsl:apply-imports/> for this mode
 	if (_importLevels != null) {
-	    Enumeration levels = _importLevels.keys();
+	    Enumeration levels = java.util.Collections.enumeration(_importLevels.keySet());
 	    while (levels.hasMoreElements()) {
 		Integer max = (Integer)levels.nextElement();
 		Integer min = (Integer)_importLevels.get(max);
@@ -1081,10 +1082,10 @@
 	final Vector names      = xsltc.getNamesIndex();
 
 	// Clear some datastructures
-	_namedTemplates = new Hashtable();
+	_namedTemplates = new ConcurrentHashMap();
 	_neededTemplates = new Hashtable();
-	_templateIHs = new Hashtable();
-	_templateILs = new Hashtable();
+	_templateIHs = new ConcurrentHashMap();
+	_templateILs = new ConcurrentHashMap();
 	_patternGroups = new Vector[32];
 	_rootPattern = null;
 
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/Stylesheet.java xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/xsltc/compiler/Stylesheet.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/Stylesheet.java	2007-11-22 18:43:55.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/xsltc/compiler/Stylesheet.java	2018-03-16 02:03:49.023387099 -0300
@@ -27,6 +27,7 @@
 import java.util.Iterator;
 import java.util.Properties;
 import java.util.StringTokenizer;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 import org.apache.xml.utils.SystemIDResolver;
 import org.apache.bcel.generic.ANEWARRAY;
@@ -116,7 +117,7 @@
     /**
      * Mapping between mode names and Mode instances.
      */
-    private final Hashtable _modes = new Hashtable();
+    private final ConcurrentHashMap _modes = new ConcurrentHashMap();
     
     /**
      * A reference to the default Mode object.
@@ -126,7 +127,7 @@
     /**
      * Mapping between extension URIs and their prefixes.
      */
-    private final Hashtable _extensions = new Hashtable();
+    private final ConcurrentHashMap _extensions = new ConcurrentHashMap();
 
     /**
      * Reference to the stylesheet from which this stylesheet was
@@ -601,7 +602,7 @@
 	if (_defaultMode == null)
 	    _defaultMode = new Mode(null, this, Constants.EMPTYSTRING);
 	_defaultMode.processPatterns(_keys);
-	final Enumeration modes = _modes.elements();
+	final Enumeration modes = java.util.Collections.enumeration(_modes.values());
 	while (modes.hasMoreElements()) {
 	    final Mode mode = (Mode)modes.nextElement();
 	    mode.processPatterns(_keys);
@@ -610,7 +611,7 @@
 	
     private void compileModes(ClassGenerator classGen) {
 	_defaultMode.compileApplyTemplates(classGen);
-	final Enumeration modes = _modes.elements();
+	final Enumeration modes = java.util.Collections.enumeration(_modes.values());
 	while (modes.hasMoreElements()) {
 	    final Mode mode = (Mode)modes.nextElement();
 	    mode.compileApplyTemplates(classGen);
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/UseAttributeSets.java xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/xsltc/compiler/UseAttributeSets.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/compiler/UseAttributeSets.java	2007-11-22 18:43:53.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/xsltc/compiler/UseAttributeSets.java	2018-03-16 02:10:51.603120117 -0300
@@ -23,6 +23,8 @@
 
 import java.util.StringTokenizer;
 import java.util.Vector;
+import java.util.List;
+import org.eclipse.collections.impl.list.mutable.FastList;
 
 import org.apache.bcel.generic.ConstantPoolGen;
 import org.apache.bcel.generic.INVOKESPECIAL;
@@ -45,7 +47,7 @@
 	"";
 
     // Contains the names of all references attribute sets
-    private final Vector _sets = new Vector(2);
+    private final List _sets = (new FastList(2)).asSynchronized();
 
     /**
      * Constructur - define initial attribute sets to use
@@ -90,7 +92,7 @@
 	// Go through each attribute set and generate a method call
 	for (int i=0; i<_sets.size(); i++) {
 	    // Get the attribute set name
-	    final QName name = (QName)_sets.elementAt(i);
+	    final QName name = (QName)_sets.get(i);
 	    // Get the AttributeSet reference from the symbol table
 	    final AttributeSet attrs = symbolTable.lookupAttributeSet(name);
 	    // Compile the call to the set's method if the set exists
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/dom/DocumentCache.java xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/xsltc/dom/DocumentCache.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/dom/DocumentCache.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/xsltc/dom/DocumentCache.java	2018-03-16 02:20:42.193005049 -0300
@@ -43,6 +43,7 @@
 import org.apache.xalan.xsltc.runtime.BasisLibrary;
 import org.apache.xalan.xsltc.runtime.Constants;
 import org.apache.xml.utils.SystemIDResolver;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 import org.xml.sax.InputSource;
 import org.xml.sax.SAXException;
@@ -54,7 +55,7 @@
 public final class DocumentCache implements DOMCache {
 
     private int       _size;
-    private Hashtable _references;
+    private ConcurrentHashMap _references;
     private String[]  _URIs;
     private int       _count;
     private int       _current;
@@ -169,7 +170,7 @@
 	_count = 0;
 	_current = 0;
 	_size  = size;
-	_references = new Hashtable(_size+2);
+	_references = new ConcurrentHashMap(_size+2);
 	_URIs = new String[_size];
 
 	try {
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/trax/DOM2SAX.java xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/xsltc/trax/DOM2SAX.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/trax/DOM2SAX.java	2007-11-22 18:43:55.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/xsltc/trax/DOM2SAX.java	2018-03-16 02:20:40.840991136 -0300
@@ -43,6 +43,7 @@
 import org.xml.sax.XMLReader;
 import org.xml.sax.ext.LexicalHandler;
 import org.xml.sax.helpers.AttributesImpl;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 /**
  * @author G. Todd Miller 
@@ -56,7 +57,7 @@
     private ContentHandler _sax = null;
     private LexicalHandler _lex = null;
     private SAXImpl _saxImpl = null;
-    private Hashtable _nsPrefixes = new Hashtable();
+    private ConcurrentHashMap _nsPrefixes = new ConcurrentHashMap();
 
     public DOM2SAX(Node root) {
 	_dom = root;
diff -ur xalan-j_2_7_1/src/org/apache/xalan/xsltc/trax/TransformerFactoryImpl.java xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/xsltc/trax/TransformerFactoryImpl.java
--- xalan-j_2_7_1/src/org/apache/xalan/xsltc/trax/TransformerFactoryImpl.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified-with-recommendations/src/org/apache/xalan/xsltc/trax/TransformerFactoryImpl.java	2018-03-16 02:22:17.865992763 -0300
@@ -57,6 +57,7 @@
 import javax.xml.transform.sax.TransformerHandler;
 import javax.xml.transform.stream.StreamResult;
 import javax.xml.transform.stream.StreamSource;
+import jsr166e.ConcurrentHashMapV8;
 
 import org.apache.xalan.xsltc.compiler.SourceLoader;
 import org.apache.xalan.xsltc.compiler.XSLTC;
@@ -137,7 +138,7 @@
      * This Hashtable is used to store parameters for locating
      * <?xml-stylesheet ...?> processing instructions in XML docs.
      */
-    private Hashtable _piParams = null;
+    private ConcurrentHashMapV8 _piParams = null;
 
     /**
      * The above hashtable stores objects of this class.
