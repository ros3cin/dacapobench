diff -ur xalan-j_2_7_1/build.xml xalan-j_2_7_1-modified/build.xml
--- xalan-j_2_7_1/build.xml	2007-11-22 18:44:01.000000000 -0300
+++ xalan-j_2_7_1-modified/build.xml	2018-06-22 00:36:11.064907889 -0300
@@ -104,6 +104,14 @@
   <property name="runtime.jar"            value="${lib.dir}/${runtime.jar.name}"/>
   <property name="regexp.jar.name"        value="regexp.jar"/>
   <property name="regexp.jar"             value="${lib.dir}/${regexp.jar.name}"/>
+  <property name="apache_commons_collections.jar.name"        value="commons-collections4-4.1.jar"/>
+  <property name="apache_commons_collections.jar"        value="${lib.dir}/${apache_commons_collections.jar.name}"/>
+  <property name="eclipse_collections_api.jar.name"        value="eclipse-collections-api-9.1.0.jar"/>
+  <property name="eclipse_collections_api.jar"             value="${lib.dir}/${eclipse_collections_api.jar.name}"/>
+  <property name="eclipse_collections_impl.jar.name"        value="eclipse-collections-9.1.0.jar"/>
+  <property name="eclipse_collections_impl.jar"             value="${lib.dir}/${eclipse_collections_impl.jar.name}"/>
+  <property name="jsr166e.jar.name"        value="jsr166e-1.0.jar"/>
+  <property name="jsr166e.jar"             value="${lib.dir}/${jsr166e.jar.name}"/>
   
   <!-- Jars need to build Xalan Java (Interpretive, Compiled, or both) or build the docs -->
   <property name="java_cup.jar.name"      value="java_cup.jar"/>
@@ -205,6 +213,10 @@
     <pathelement location="${taglet.jar}" />
     <pathelement location="${build.serializer.jar}" />
     <pathelement location="${build.xalan.jar}" />
+    <pathelement location="${apache_commons_collections.jar}" />
+    <pathelement location="${eclipse_collections_api.jar}" />
+    <pathelement location="${eclipse_collections_impl.jar}" />
+    <pathelement location="${jsr166e.jar}" />
     <pathelement path="${java.class.path}" />
   </path>
   <path id="samples.class.path">
@@ -212,6 +224,10 @@
     <pathelement location="${build.serializer.jar}" />    
     <pathelement location="${parser.jar}" />  
     <pathelement location="${build.xalan.jar}" />
+    <pathelement location="${apache_commons_collections.jar}" />
+    <pathelement location="${eclipse_collections_api.jar}" />
+    <pathelement location="${eclipse_collections_impl.jar}" />
+    <pathelement location="${jsr166e.jar}" />
     <pathelement path="${java.class.path}" />
   </path>
   <path id="compile.class.path">
@@ -221,6 +237,10 @@
     <pathelement location="${xmlapis.jar}" />
     <pathelement location="${build.serializer.jar}" />
     <pathelement location="${parser.jar}" />
+    <pathelement location="${apache_commons_collections.jar}" />
+    <pathelement location="${eclipse_collections_api.jar}" />
+    <pathelement location="${eclipse_collections_impl.jar}" />
+    <pathelement location="${jsr166e.jar}" />
     <pathelement path="${java.class.path}" />
   </path>
   <path id="xslt.boot.class.path">
@@ -233,11 +253,19 @@
     <pathelement location="${xmlapis.jar}" />
     <pathelement location="${build.serializer.jar}" />    
     <pathelement location="${parser.jar}" />   
+    <pathelement location="${apache_commons_collections.jar}" />
+    <pathelement location="${eclipse_collections_api.jar}" />
+    <pathelement location="${eclipse_collections_impl.jar}" />
+    <pathelement location="${jsr166e.jar}" />
     <pathelement path="${build.boot.class.path}" />
     <pathelement path="${sun.boot.class.path}" />
   </path>
   <path id="compile.source.path">
     <dirset dir="${src.dir}" includes="/org/apache/**" />
+    <pathelement location="${apache_commons_collections.jar}" />
+    <pathelement location="${eclipse_collections_api.jar}" />
+    <pathelement location="${eclipse_collections_impl.jar}" />
+    <pathelement location="${jsr166e.jar}" />
   </path>
 
   <!-- patternsets for source and binary distribution packages -->
@@ -251,6 +279,10 @@
     <include name="${dist.file}/${xmlapis.jar.name}"/>
     <include name="${dist.file}/${parser.jar.name}"/>
     <include name="${dist.file}/${serializer.jar.name}"/>
+    <include name="${dist.file}/${apache_commons_collections.jar.name}"/>
+    <include name="${dist.file}/${eclipse_collections_api.jar.name}"/>
+    <include name="${dist.file}/${eclipse_collections_impl.jar.name}"/>
+    <include name="${dist.file}/${jsr166e.jar.name}"/>
     <include name="${dist.file}/samples/"/>    
     <include name="${dist.file}/samples/xalansamples.jar"/>
     <include name="${dist.file}/samples/xalanservlet.war"/>
@@ -270,6 +302,10 @@
     <include name="${dist.file}/${xmlapis.jar.name}"/>
     <include name="${dist.file}/${parser.jar.name}"/>
     <include name="${dist.file}/${serializer.jar.name}"/>
+    <include name="${dist.file}/${apache_commons_collections.jar.name}"/>
+    <include name="${dist.file}/${eclipse_collections_api.jar.name}"/>
+    <include name="${dist.file}/${eclipse_collections_impl.jar.name}"/>
+    <include name="${dist.file}/${jsr166e.jar.name}"/>
     <include name="${dist.file}/samples/"/>        
     <include name="${dist.file}/samples/xalansamples.jar"/>
     <include name="${dist.file}/samples/xalanservlet.war"/>
@@ -305,6 +341,10 @@
     <include name="${dist.file}/tools/${jlex.jar.name}"/>
     <include name="${dist.file}/lib/${runtime.jar.name}"/>
     <include name="${dist.file}/lib/${regexp.jar.name}"/>
+    <include name="${dist.file}/lib/${apache_commons_collections.jar.name}"/>
+    <include name="${dist.file}/lib/${eclipse_collections_api.jar.name}"/>
+    <include name="${dist.file}/lib/${eclipse_collections_impl.jar.name}"/>
+    <include name="${dist.file}/${jsr166e.jar.name}"/>
   </patternset>
 
   <!-- =================================================================== -->
@@ -431,6 +471,10 @@
     <pathelement location="${jlex.jar}" />
     <pathelement location="${java_cup.jar}" />
     <pathelement location="${runtime.jar}" />
+    <pathelement location="${apache_commons_collections.jar}" />
+    <pathelement location="${eclipse_collections_api.jar}" />
+    <pathelement location="${eclipse_collections_impl.jar}" />
+    <pathelement location="${jsr166e.jar}"/>
     <!-- build.classes needed for 
          org.apache.xalan.xsltc.util.JavaCupRedirect -->
     <pathelement location="${build.classes}" />
@@ -559,6 +603,12 @@
     <!-- remove the jar file -->
     <delete file="${build.classes}/${param_jar_name}" />
   </target>
+
+  <!-- A parametrized target which is used to copy and expand a XSLTC support jar -->
+  <target name="xsltc.copy-deps-jar-not-unjared" unless="${param_unless}">
+    <!-- copy the jar file to the build/classes directory -->
+    <copy todir="${build.dir}" file="${lib.dir}/${param_jar_name}"/>
+  </target>
   
   <!-- Copy and expand the XSLTC support jars if needed -->
   <target name="xsltc.copy-deps-jars" depends="xsltc.copy-licenses">
@@ -592,6 +642,26 @@
       <param name="param_unless" value="xsltc.regexp_jar.not_needed" />
       <param name="param_jar_name" value="${regexp.jar.name}" />
     </antcall>
+
+    <antcall target="xsltc.copy-deps-jar-not-unjared">
+      <param name="param_unless" value="" />
+      <param name="param_jar_name" value="${apache_commons_collections.jar.name}" />
+    </antcall>
+
+    <antcall target="xsltc.copy-deps-jar-not-unjared">
+      <param name="param_unless" value="" />
+      <param name="param_jar_name" value="${eclipse_collections_api.jar.name}" />
+    </antcall>
+
+    <antcall target="xsltc.copy-deps-jar-not-unjared">
+      <param name="param_unless" value="" />
+      <param name="param_jar_name" value="${eclipse_collections_impl.jar.name}" />
+    </antcall>
+
+    <antcall target="xsltc.copy-deps-jar-not-unjared">
+      <param name="param_unless" value="" />
+      <param name="param_jar_name" value="${jsr166e.jar.name}" />
+    </antcall>
     
     <!-- remove the old META-INF/MANIFEST.MF file -->
     <delete file="${build.classes}/META-INF/MANIFEST.MF" quiet="true"/>  
diff -ur xalan-j_2_7_1/src/MANIFEST.MF xalan-j_2_7_1-modified/src/MANIFEST.MF
--- xalan-j_2_7_1/src/MANIFEST.MF	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified/src/MANIFEST.MF	2018-06-21 22:58:22.142008560 -0300
@@ -1,8 +1,7 @@
 Manifest-Version: 1.0
 Created-By: @java.version@ (@java.vendor@)
 Main-Class: org.apache.xalan.xslt.Process
-Class-Path: xercesImpl.jar xml-apis.jar serializer.jar
-
+Class-Path: xercesImpl.jar xml-apis.jar serializer.jar eclipse-collections-api-9.1.0.jar eclipse-collections-9.1.0.jar jsr166e-1.0.jar
 
 Name: org/apache/xalan/
 Comment: Main Xalan engine implementing TrAX/JAXP
diff -ur xalan-j_2_7_1/src/org/apache/xalan/extensions/ExtensionHandlerGeneral.java xalan-j_2_7_1-modified/src/org/apache/xalan/extensions/ExtensionHandlerGeneral.java
--- xalan-j_2_7_1/src/org/apache/xalan/extensions/ExtensionHandlerGeneral.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/extensions/ExtensionHandlerGeneral.java	2018-06-21 23:02:49.983936599 -0300
@@ -45,6 +45,7 @@
 import org.apache.xpath.XPathProcessorException;
 import org.apache.xpath.functions.FuncExtFunction;
 import org.apache.xpath.objects.XObject;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 /**
  * Class handling an extension namespace for XPath. Provides functions
@@ -63,10 +64,10 @@
   private String m_scriptSrcURL;  
 
   /** functions of namespace        */
-  private Hashtable m_functions = new Hashtable();  
+  private ConcurrentHashMap m_functions = new ConcurrentHashMap();  
 
   /** elements of namespace         */
-  private Hashtable m_elements = new Hashtable();   
+  private ConcurrentHashMap m_elements = new ConcurrentHashMap();   
 
   // BSF objects used to invoke BSF by reflection.  Do not import the BSF classes
   // since we don't want a compile dependency on BSF.
diff -ur xalan-j_2_7_1/src/org/apache/xalan/extensions/ExtensionHandlerJava.java xalan-j_2_7_1-modified/src/org/apache/xalan/extensions/ExtensionHandlerJava.java
--- xalan-j_2_7_1/src/org/apache/xalan/extensions/ExtensionHandlerJava.java	2007-11-22 18:43:52.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/extensions/ExtensionHandlerJava.java	2018-06-21 23:03:33.392271542 -0300
@@ -21,6 +21,7 @@
 package org.apache.xalan.extensions;
 
 import java.util.Hashtable;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 /**
  * Abstract base class handling the java language extensions for XPath.
@@ -36,7 +37,7 @@
   protected String m_className = "";
 
   /** Table of cached methods          */
-  private Hashtable m_cachedMethods = new Hashtable();
+  private ConcurrentHashMap m_cachedMethods = new ConcurrentHashMap();
 
   /**
    * Construct a new extension handler given all the information
diff -ur xalan-j_2_7_1/src/org/apache/xalan/extensions/ExtensionNamespacesManager.java xalan-j_2_7_1-modified/src/org/apache/xalan/extensions/ExtensionNamespacesManager.java
--- xalan-j_2_7_1/src/org/apache/xalan/extensions/ExtensionNamespacesManager.java	2007-11-22 18:43:55.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/extensions/ExtensionNamespacesManager.java	2018-06-22 00:22:10.368471842 -0300
@@ -20,9 +20,11 @@
  */
 package org.apache.xalan.extensions;
 
+import java.util.List;
 import java.util.Vector;
 
 import org.apache.xalan.templates.Constants;
+import org.eclipse.collections.impl.list.mutable.FastList;
 
 /**
  * Used during assembly of a stylesheet to collect the information for each 
@@ -40,7 +42,7 @@
    * Vector of ExtensionNamespaceSupport objects for predefined ExtensionNamespaces. Elements
    * from this vector are added to the m_extensions vector when encountered in the stylesheet.
    */
-  private Vector m_predefExtensions = new Vector(7);
+  private List m_predefExtensions = (new FastList(7)).asSynchronized();
   /**
    * Vector of extension namespaces for which sufficient information is not yet available to
    * complete the registration process.
@@ -100,7 +102,7 @@
    * Get the index for a namespace entry in the extension namespace Vector, -1 if
    * no such entry yet exists.
    */
-  public int namespaceIndex(String namespace, Vector extensions)
+  public int namespaceIndex(String namespace, List extensions)
   {
     for (int i = 0; i < extensions.size(); i++)
     {
diff -ur xalan-j_2_7_1/src/org/apache/xalan/lib/ExsltSets.java xalan-j_2_7_1-modified/src/org/apache/xalan/lib/ExsltSets.java
--- xalan-j_2_7_1/src/org/apache/xalan/lib/ExsltSets.java	2007-11-22 18:43:55.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/lib/ExsltSets.java	2018-06-21 23:15:21.818213936 -0300
@@ -22,6 +22,7 @@
 
 import java.util.HashMap;
 import java.util.Map;
+import org.apache.commons.collections4.map.HashedMap;
 
 import org.apache.xml.utils.DOMHelper;
 import org.apache.xpath.NodeSet;
@@ -191,7 +192,7 @@
     NodeSet dist = new NodeSet();
     dist.setShouldCacheNodes(true);
 
-    Map stringTable = new HashMap();
+    Map stringTable = new HashedMap();
     
     for (int i = 0; i < nl.getLength(); i++)
     {
diff -ur xalan-j_2_7_1/src/org/apache/xalan/lib/Redirect.java xalan-j_2_7_1-modified/src/org/apache/xalan/lib/Redirect.java
--- xalan-j_2_7_1/src/org/apache/xalan/lib/Redirect.java	2007-11-22 18:43:53.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/lib/Redirect.java	2018-06-22 00:11:14.046385594 -0300
@@ -24,6 +24,7 @@
 import java.io.FileOutputStream;
 import java.io.OutputStream;
 import java.util.Hashtable;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 import javax.xml.transform.Result;
 import javax.xml.transform.TransformerException;
@@ -126,12 +127,12 @@
   /**
    * List of formatter listeners indexed by filename.
    */
-  protected Hashtable m_formatterListeners = new Hashtable ();
+  protected ConcurrentHashMap m_formatterListeners = new ConcurrentHashMap ();
 
   /**
    * List of output streams indexed by filename.
    */
-  protected Hashtable m_outputStreams = new Hashtable ();
+  protected ConcurrentHashMap m_outputStreams = new ConcurrentHashMap ();
 
   /** 
    * Default append mode for bare open calls.  
diff -ur xalan-j_2_7_1/src/org/apache/xalan/lib/sql/ConnectionPoolManager.java xalan-j_2_7_1-modified/src/org/apache/xalan/lib/sql/ConnectionPoolManager.java
--- xalan-j_2_7_1/src/org/apache/xalan/lib/sql/ConnectionPoolManager.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/lib/sql/ConnectionPoolManager.java	2018-06-22 00:11:14.046385594 -0300
@@ -23,6 +23,7 @@
  package org.apache.xalan.lib.sql;
 
 import java.util.Hashtable;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 import org.apache.xalan.res.XSLMessages;
 import org.apache.xalan.res.XSLTErrorResources;
@@ -33,7 +34,7 @@
 {
   /**
    */
-  private static Hashtable m_poolTable = null;
+  private static ConcurrentHashMap m_poolTable = null;
 
   /**
    */
@@ -53,7 +54,7 @@
      * Initialize the pool table
      */   
     if (m_poolTable == null)
-            m_poolTable = new Hashtable();
+            m_poolTable = new ConcurrentHashMap();
   }
 
   /**
diff -ur xalan-j_2_7_1/src/org/apache/xalan/lib/sql/QueryParameter.java xalan-j_2_7_1-modified/src/org/apache/xalan/lib/sql/QueryParameter.java
--- xalan-j_2_7_1/src/org/apache/xalan/lib/sql/QueryParameter.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/lib/sql/QueryParameter.java	2018-06-22 00:11:14.046385594 -0300
@@ -24,6 +24,7 @@
 package org.apache.xalan.lib.sql;
 
 import java.util.Hashtable;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 import java.sql.PreparedStatement;
 import java.sql.CallableStatement;
 import java.sql.Statement;
@@ -35,7 +36,7 @@
   private String  m_value;
   private boolean m_output;
   private String  m_typeName;
-  private static  Hashtable m_Typetable = null;
+  private static  ConcurrentHashMap m_Typetable = null;
 
   public QueryParameter()
   {
@@ -148,7 +149,7 @@
     if ( m_Typetable == null )
     {
       // Load up the type mapping table.
-      m_Typetable = new Hashtable();
+      m_Typetable = new ConcurrentHashMap();
       m_Typetable.put("BIGINT", new Integer(java.sql.Types.BIGINT));
       m_Typetable.put("BINARY", new Integer(java.sql.Types.BINARY));
       m_Typetable.put("BIT", new Integer(java.sql.Types.BIT));
diff -ur xalan-j_2_7_1/src/org/apache/xalan/processor/XSLTElementDef.java xalan-j_2_7_1-modified/src/org/apache/xalan/processor/XSLTElementDef.java
--- xalan-j_2_7_1/src/org/apache/xalan/processor/XSLTElementDef.java	2007-11-22 18:43:53.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/processor/XSLTElementDef.java	2018-06-22 00:17:54.362116404 -0300
@@ -20,8 +20,10 @@
  */
 package org.apache.xalan.processor;
 
+import java.util.Collections;
 import java.util.Enumeration;
 import java.util.Hashtable;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 import org.apache.xalan.templates.Constants;
 import org.apache.xml.utils.QName;
@@ -285,7 +287,7 @@
 				if (def != null && def.getRequired())
 				{
 					if (m_requiredFound == null)			
-						m_requiredFound = new Hashtable();
+						m_requiredFound = new ConcurrentHashMap();
 					m_requiredFound.put(def.getName(), "xsl:" +def.getName()); 
 				}
 			}
@@ -696,7 +698,7 @@
     return m_required;
   }
 	
-	Hashtable m_requiredFound;
+	ConcurrentHashMap m_requiredFound;
 	
 	/**
    * Set this required element found.
@@ -729,7 +731,7 @@
   {
 		if (m_requiredFound == null)
 			return null;
-		Enumeration elems = m_requiredFound.elements();
+		Enumeration elems = Collections.enumeration(m_requiredFound.values());
 		String s = "";
 		boolean first = true;
 		while (elems.hasMoreElements())
diff -ur xalan-j_2_7_1/src/org/apache/xalan/templates/ElemLiteralResult.java xalan-j_2_7_1-modified/src/org/apache/xalan/templates/ElemLiteralResult.java
--- xalan-j_2_7_1/src/org/apache/xalan/templates/ElemLiteralResult.java	2007-11-22 18:43:55.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/templates/ElemLiteralResult.java	2018-06-21 23:31:44.488774610 -0300
@@ -23,6 +23,7 @@
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+import org.eclipse.collections.impl.list.mutable.FastList;
 
 import javax.xml.transform.TransformerException;
 
@@ -133,7 +134,7 @@
   {
 
     if (null == m_avts)
-      m_avts = new ArrayList();
+      m_avts = new FastList();
 
     m_avts.add(avt);
   }
diff -ur xalan-j_2_7_1/src/org/apache/xalan/templates/ElemTemplateElement.java xalan-j_2_7_1-modified/src/org/apache/xalan/templates/ElemTemplateElement.java
--- xalan-j_2_7_1/src/org/apache/xalan/templates/ElemTemplateElement.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/templates/ElemTemplateElement.java	2018-06-21 23:34:44.374144487 -0300
@@ -24,6 +24,7 @@
 import java.util.ArrayList;
 import java.util.Enumeration;
 import java.util.List;
+import org.eclipse.collections.impl.list.mutable.FastList;
 
 import javax.xml.transform.SourceLocator;
 import javax.xml.transform.TransformerException;
@@ -860,7 +861,7 @@
       String prefix = (String) decls.nextElement();
 
       if (null == m_declaredPrefixes)
-        m_declaredPrefixes = new ArrayList();
+        m_declaredPrefixes = new FastList();
 
       String uri = nsSupport.getURI(prefix);
 
diff -ur xalan-j_2_7_1/src/org/apache/xalan/templates/Stylesheet.java xalan-j_2_7_1-modified/src/org/apache/xalan/templates/Stylesheet.java
--- xalan-j_2_7_1/src/org/apache/xalan/templates/Stylesheet.java	2007-11-22 18:43:52.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/templates/Stylesheet.java	2018-06-22 00:16:51.869538608 -0300
@@ -26,6 +26,7 @@
 import java.util.Hashtable;
 import java.util.Stack;
 import java.util.Vector;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 import javax.xml.transform.SourceLocator;
 import javax.xml.transform.TransformerException;
@@ -1151,7 +1152,7 @@
    * The "non-xsl-top-level" properties.
    * @serial
    */
-  private Hashtable m_NonXslTopLevel;
+  private ConcurrentHashMap m_NonXslTopLevel;
 
   /**
    * Set found a non-xslt element.
@@ -1164,7 +1165,7 @@
   {
 
     if (null == m_NonXslTopLevel)
-      m_NonXslTopLevel = new Hashtable();
+      m_NonXslTopLevel = new ConcurrentHashMap();
 
     m_NonXslTopLevel.put(name, obj);
   }
@@ -1486,7 +1487,7 @@
       
       if(null != m_NonXslTopLevel)
       {
-      	java.util.Enumeration elements = m_NonXslTopLevel.elements();
+      	java.util.Enumeration elements = java.util.Collections.enumeration(m_NonXslTopLevel.values());
       	while(elements.hasMoreElements())
       	{
       	  ElemTemplateElement elem = (ElemTemplateElement)elements.nextElement();
diff -ur xalan-j_2_7_1/src/org/apache/xalan/templates/StylesheetRoot.java xalan-j_2_7_1-modified/src/org/apache/xalan/templates/StylesheetRoot.java
--- xalan-j_2_7_1/src/org/apache/xalan/templates/StylesheetRoot.java	2007-11-22 18:43:53.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/templates/StylesheetRoot.java	2018-06-22 00:11:14.046385594 -0300
@@ -26,6 +26,7 @@
 import java.util.Hashtable;
 import java.util.Properties;
 import java.util.Vector;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 import javax.xml.transform.ErrorListener;
 import javax.xml.transform.Templates;
@@ -289,9 +290,9 @@
 //  m_outputProperties = new OutputProperties(Method.XML);
     
     m_attrSets = new HashMap();
-    m_decimalFormatSymbols = new Hashtable();
+    m_decimalFormatSymbols = new ConcurrentHashMap();
     m_keyDecls = new Vector();
-    m_namespaceAliasComposed = new Hashtable();
+    m_namespaceAliasComposed = new ConcurrentHashMap();
     m_templateList = new TemplateList();
     m_variables = new Vector();
 
@@ -582,7 +583,7 @@
    * Table of DecimalFormatSymbols, keyed by QName.
    * @serial
    */
-  private Hashtable m_decimalFormatSymbols;
+  private ConcurrentHashMap m_decimalFormatSymbols;
 
   /**
    * Recompose the decimal-format declarations.
@@ -672,7 +673,7 @@
    * Composed set of all namespace aliases.
    * @serial
    */
-  private Hashtable m_namespaceAliasComposed;
+  private ConcurrentHashMap m_namespaceAliasComposed;
 
   /**
    * Recompose the namespace-alias declarations.
diff -ur xalan-j_2_7_1/src/org/apache/xalan/templates/TemplateList.java xalan-j_2_7_1-modified/src/org/apache/xalan/templates/TemplateList.java
--- xalan-j_2_7_1/src/org/apache/xalan/templates/TemplateList.java	2007-11-22 18:43:54.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/templates/TemplateList.java	2018-06-22 00:23:34.913246573 -0300
@@ -20,9 +20,11 @@
  */
 package org.apache.xalan.templates;
 
+import java.util.Collections;
 import java.util.Enumeration;
 import java.util.Hashtable;
 import java.util.Vector;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 import javax.xml.transform.TransformerException;
 
@@ -133,7 +135,7 @@
   void dumpAssociationTables()
   {
 
-    Enumeration associations = m_patternTable.elements();
+    Enumeration associations = Collections.enumeration(m_patternTable.values());
 
     while (associations.hasMoreElements())
     {
@@ -181,7 +183,7 @@
 
     if (null != m_wildCardPatterns)
     {
-      Enumeration associations = m_patternTable.elements();
+      Enumeration associations = Collections.enumeration(m_patternTable.values());
 
       while (associations.hasMoreElements())
       {
@@ -774,7 +776,7 @@
    * to some degree of specifity.
    * @serial
    */
-  private Hashtable m_patternTable = new Hashtable(89);
+  private ConcurrentHashMap m_patternTable = new ConcurrentHashMap(89);
 
   /** Wildcard patterns.
    *  @serial          */
@@ -863,11 +865,11 @@
     private boolean inPatterns;
     private TemplateSubPatternAssociation curPattern;
 
-    private Hashtable m_compilerCache = new Hashtable();
+    private ConcurrentHashMap m_compilerCache = new ConcurrentHashMap();
 
     private TemplateWalker()
     {
-      hashIterator = m_patternTable.elements();
+      hashIterator = Collections.enumeration(m_patternTable.values());
       inPatterns = true;
       curPattern = null;
     }
diff -ur xalan-j_2_7_1/src/org/apache/xalan/transformer/KeyTable.java xalan-j_2_7_1-modified/src/org/apache/xalan/transformer/KeyTable.java
--- xalan-j_2_7_1/src/org/apache/xalan/transformer/KeyTable.java	2007-11-22 18:43:52.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/transformer/KeyTable.java	2018-06-22 00:11:14.046385594 -0300
@@ -22,6 +22,7 @@
 
 import java.util.Hashtable;
 import java.util.Vector;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 import javax.xml.transform.TransformerException;
 
@@ -60,7 +61,7 @@
    * Key is XMLString, the ref value
    * Value is XNodeSet, the key() function result for the given ref value.
    */
-  private Hashtable m_refsTable = null;
+  private ConcurrentHashMap m_refsTable = null;
 
   /**
    * Get the document root matching this key.  
@@ -180,11 +181,11 @@
    * @return lazy initialized refs table associating evaluation of key function
    *         with a XNodeSet
    */
-  private Hashtable getRefsTable()
+  private ConcurrentHashMap getRefsTable()
   {
     if (m_refsTable == null) {
       // initial capacity set to a prime number to improve hash performance
-      m_refsTable = new Hashtable(89);
+      m_refsTable = new ConcurrentHashMap(89);
 
       KeyIterator ki = (KeyIterator) (m_keyNodes).getContainedIter();
       XPathContext xctxt = ki.getXPathContext();
diff -ur xalan-j_2_7_1/src/org/apache/xalan/transformer/TransformerIdentityImpl.java xalan-j_2_7_1-modified/src/org/apache/xalan/transformer/TransformerIdentityImpl.java
--- xalan-j_2_7_1/src/org/apache/xalan/transformer/TransformerIdentityImpl.java	2007-11-22 18:43:52.000000000 -0300
+++ xalan-j_2_7_1-modified/src/org/apache/xalan/transformer/TransformerIdentityImpl.java	2018-06-22 00:11:14.046385594 -0300
@@ -23,6 +23,7 @@
 import java.io.IOException;
 import java.util.Hashtable;
 import java.util.Properties;
+import org.eclipse.collections.impl.map.mutable.ConcurrentHashMap;
 
 import javax.xml.XMLConstants;
 import javax.xml.parsers.DocumentBuilder;
@@ -551,7 +552,7 @@
     
     if (null == m_params)
     {
-      m_params = new Hashtable();
+      m_params = new ConcurrentHashMap();
     }
 
     m_params.put(name, value);
@@ -1455,7 +1456,7 @@
    * The parameters, which is unused, but must be returned to fullfill the
    *  Transformer interface.
    */
-  private Hashtable m_params;
+  private ConcurrentHashMap m_params;
 
   /** The error listener for TrAX errors and warnings. */
   private ErrorListener m_errorListener =
